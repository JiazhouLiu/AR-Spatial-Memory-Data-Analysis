install.packages(c("dbplyr", "RSQLite"))
library(dplyr)
library(dbplyr)
install.packages("dbplyr")
install.packages("dbplyr")
library(rlang)
install.packages("rlang")
install.packages("rlang")
install.packages("dbplyr")
library(rlang)
install.packages("rlang")
install.packages("rlang")
remove.packages("rlang", lib="~/R/win-library/3.6")
install.packages("rlang")
install.packages("rlang")
install.packages("C:/Users/Clair/Downloads/rlang_1.1.0.zip", repos = NULL, type = "win.binary")
install.packages("dbplyr")
install.packages("dbplyr")
install.packages("C:/Users/Clair/Downloads/rlang_1.1.0 (1).zip", repos = NULL, type = "win.binary")
library(rlang)
detach("package:rlang", unload = TRUE)
remove.packages("rlang", lib="~/R/win-library/3.6")
install.packages("C:/Users/Clair/Downloads/rlang_1.1.0 (1).zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Clair/Downloads/rlang_1.1.0.tar.gz", repos = NULL, type = "source")
install.packages("rlang")
install.packages("rlang", type = "source")
remove.packages("rlang", lib="~/R/win-library/3.6")
install.packages("rlang", type = "source")
install.packages("rlang", type = "source")
install.packages("dbplyr")
df <- dbGetQuery(con, statement = read_file('data_Export.sql'))
library(DBI)
df <- dbGetQuery(con, statement = read_file('data_Export.sql'))
conn = connectDb()
connectDB <- function() {
con <- DBI::dbConnect(odbc::odbc(), "MyDB")
assign("MyDB", con, envir = .GlobalEnv)
}
conn = connectDb()
conn = connectDB()
mammals <- DBI::dbConnect(RSQLite::SQLite(), "data_Export.sql")
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
library(DBI)
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
getSQL <- function(filepath){
con = file(filepath, "r")
sql.string <- ""
while (TRUE){
line <- readLines(con, n = 1)
if ( length(line) == 0 ){
break
}
line <- gsub("\\t", " ", line)
if(grepl("--",line) == TRUE){
line <- paste(sub("--","/*",line),"*/")
}
sql.string <- paste(sql.string, line)
}
close(con)
return(sql.string)
}
data <- getSQL("data_Export.sql")
df <- dbGetQuery(con, statement = data)
install.packages("readr")
df <- dbGetQuery(con, statement = read_file('data_Export.sql'))
library(readr)
df <- dbGetQuery(con, statement = read_file('data_Export.sql'))
library(sqldf)
#install.packages("RcppHungarian")
library(RcppHungarian)
library(ggplot2)
### Functions ###
euclidean_dist <- function(x, y) sqrt(sum((x - y)^2))
### Pre-defined variables ###
set.seed(593903)
difficulty <- 5
vectorDim <- 3
setwd("~/R Projects/ARSpatialMemory/Data/participant 10")
### Experiment Data ###
UserFilePattern <- list.files(pattern="*_trialCards.csv")
TaskFilePattern <- list.files(pattern="*_answerCards.csv")
readUserFile <- read.csv(UserFilePattern, header=FALSE)
readTaskFile <- read.csv(TaskFilePattern, header=FALSE)
AccuracyResult<- c()
EuclErrorResult <- c()
for(row in 1:nrow(readUserFile)){
UserCards <- c()
UserCard1 <- c()
UserCard2 <- c()
UserCard3 <- c()
UserCard4 <- c()
UserCard5 <- c()
TaskCards <- c()
TaskCard1 <- c()
TaskCard2 <- c()
TaskCard3 <- c()
TaskCard4 <- c()
TaskCard5 <- c()
for(col in 1:20){
if((col-1) %% 4 == 0){
UserCards <- c(UserCards, readUserFile[row,col])
}else{
if((col-1) %/% 4 == 0){
UserCard1 <- c(UserCard1, readUserFile[row,col])
}else if((col-1) %/% 4 == 1){
UserCard2 <- c(UserCard2, readUserFile[row,col])
}else if((col-1) %/% 4 == 2){
UserCard3 <- c(UserCard3, readUserFile[row,col])
}else if((col-1) %/% 4 == 3){
UserCard4 <- c(UserCard4, readUserFile[row,col])
}else if((col-1) %/% 4 == 4){
UserCard5 <- c(UserCard5, readUserFile[row,col])
}
}
}
for(col in 1:20){
if((col-1) %% 4 == 0){
TaskCards <- c(TaskCards, readTaskFile[row,col])
}else{
if((col-1) %/% 4 == 0){
TaskCard1 <- c(TaskCard1, readTaskFile[row,col])
}else if((col-1) %/% 4 == 1){
TaskCard2 <- c(TaskCard2, readTaskFile[row,col])
}else if((col-1) %/% 4 == 2){
TaskCard3 <- c(TaskCard3, readTaskFile[row,col])
}else if((col-1) %/% 4 == 3){
TaskCard4 <- c(TaskCard4, readTaskFile[row,col])
}else if((col-1) %/% 4 == 4){
TaskCard5 <- c(TaskCard5, readTaskFile[row,col])
}
}
}
### Data into Array ###
UserArray <- array(c(UserCard1,UserCard2,UserCard3,UserCard4,UserCard5), dim = c(vectorDim, difficulty))
UserDiffArray <- UserArray[,match(setdiff(UserCards,TaskCards),UserCards)]
TaskArray <- array(c(TaskCard1,TaskCard2,TaskCard3,TaskCard4,TaskCard5), dim = c(vectorDim, difficulty))
TaskDiffArray <- TaskArray[,match(setdiff(TaskCards,UserCards),TaskCards)]
### Analyse data ###
if(length(match(setdiff(TaskCards,UserCards),TaskCards)) == 0){
### Result ###
AccuracyResult <- c(AccuracyResult, 1)
EuclErrorResult <- c(EuclErrorResult, 0)
}else if(length(match(setdiff(TaskCards,UserCards),TaskCards)) == 1){
### Result ###
AccuracyResult <- c(AccuracyResult, (difficulty - length(match(setdiff(TaskCards,UserCards),TaskCards))) / difficulty)
EuclErrorResult <- c(EuclErrorResult, euclidean_dist(UserDiffArray, TaskDiffArray))
}else if(length(match(setdiff(TaskCards,UserCards),TaskCards)) > 1){
tmpVec <- c()
for (a in 1:length(UserDiffArray[1,])) {
for (b in 1:length(TaskDiffArray[1,])) {
dist <- euclidean_dist(UserDiffArray[,a], TaskDiffArray[,b])
tmpVec <- c(tmpVec,dist)
}
}
DistArray <- array(tmpVec, dim = c(length(UserDiffArray[1,]),length(TaskDiffArray[1,])))
### Result ###
AccuracyResult <- c(AccuracyResult, (difficulty - length(UserDiffArray[1,])) / difficulty)
EuclErrorResult <- c(EuclErrorResult, HungarianSolver(DistArray)$cost)
}
}
### write to CSV
VecAccuracy <- c()
for(trial in 1:24){
if((trial-1) %% 6 == 0){
VecAccuracy <- c(VecAccuracy, "NA")
}else{
VecAccuracy <- c(VecAccuracy, AccuracyResult[1])
AccuracyResult <- AccuracyResult[-1]
}
}
dfAccuracy <- data.frame(column1 = VecAccuracy)
write.table(dfAccuracy, "AccuracyResult.csv", col.names = FALSE, row.names = FALSE)
VecEAccuracy <- c()
for(trial in 1:24){
if((trial-1) %% 6 == 0){
VecEAccuracy <- c(VecEAccuracy, "NA")
}else{
VecEAccuracy <- c(VecEAccuracy, EuclErrorResult[1])
EuclErrorResult <- EuclErrorResult[-1]
}
}
dfEAccuracy <- data.frame(column1 = VecEAccuracy)
write.table(dfEAccuracy, "EuclErrorResult.csv", col.names = FALSE, row.names = FALSE)
