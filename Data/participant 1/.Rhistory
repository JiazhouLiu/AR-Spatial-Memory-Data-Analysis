summary(modelAccuracy)
summary(modelEucliError)
View(FinalResultTable)
View(FinalResultCopy)
#install.packages("RcppHungarian")
#install.packages("effectsize")
#install.packages("pwr")
library(RcppHungarian)
library(ggplot2)
library(dplyr)
library("effectsize")
library("pwr")
### Functions ###
euclidean_dist <- function(x, y) sqrt(sum((x - y)^2))
### Pre-defined variables ###
set.seed(593903)
difficulty <- 5
vectorDim <- 3
removeDiscardedTrials <- TRUE
### initiate data frames for analysis
AccuracyDF <- data.frame(
Participant = rep(c(1:16), each = 4),
Furniture = rep(c("Has Furniture", "No Furniture", "Has Furniture", "No Furniture"), times = 16),
Layout = rep(c("Regular", "Irregular", "Irregular", "Regular"), times = 16),
Accuracy = rep(c(0), times = 64),
EuclideanError = rep(c(0), times = 64)
)
### testing ###
# setwd("~/R Projects/ARSpatialMemory/Data/participant 2")
# InteractionFilepattern <- list.files(pattern="*_Interaction.csv")
# readInteractionFile <- read.csv(InteractionFilepattern, header=TRUE)
NoParticipant <- 0
### Loop for all participant files
for(par in 1:16){
dirPath <- paste(c("~/R Projects/ARSpatialMemory/Data/participant", par), collapse = " ")
if(dir.exists(dirPath)){
setwd(dirPath)
NoParticipant <- NoParticipant + 1
### Experiment Data ###
UserFilePattern <- list.files(pattern="*_trialCards.csv")
TaskFilePattern <- list.files(pattern="*_answerCards.csv")
InteractionFilepattern <- list.files(pattern="*_Interaction.csv")
readUserFile <- read.csv(UserFilePattern, header=FALSE)
readTaskFile <- read.csv(TaskFilePattern, header=FALSE)
readInteractionFile <- read.csv(InteractionFilepattern, header=TRUE)
AccuracyResult<- c()
EuclErrorResult <- c()
### Calculate interaction time
InteractionFileSubset <- readInteractionFile[(readInteractionFile$Info == "Learning Phase" | readInteractionFile$Info == "Distractor") & readInteractionFile$TrialID != "Training",]
timeCal <- c()
rowN <- 1
while (rowN < nrow(InteractionFileSubset)) {
timeCal <- c(timeCal, InteractionFileSubset[rowN + 1, 1] - InteractionFileSubset[rowN, 1])
rowN <- rowN + 2
}
for(row in 1:nrow(readUserFile)){
UserCards <- c()
UserCard1 <- c()
UserCard2 <- c()
UserCard3 <- c()
UserCard4 <- c()
UserCard5 <- c()
TaskCards <- c()
TaskCard1 <- c()
TaskCard2 <- c()
TaskCard3 <- c()
TaskCard4 <- c()
TaskCard5 <- c()
for(col in 1:20){
if((col-1) %% 4 == 0){
UserCards <- c(UserCards, readUserFile[row,col])
}else{
if((col-1) %/% 4 == 0){
UserCard1 <- c(UserCard1, readUserFile[row,col])
}else if((col-1) %/% 4 == 1){
UserCard2 <- c(UserCard2, readUserFile[row,col])
}else if((col-1) %/% 4 == 2){
UserCard3 <- c(UserCard3, readUserFile[row,col])
}else if((col-1) %/% 4 == 3){
UserCard4 <- c(UserCard4, readUserFile[row,col])
}else if((col-1) %/% 4 == 4){
UserCard5 <- c(UserCard5, readUserFile[row,col])
}
}
}
for(col in 1:20){
if((col-1) %% 4 == 0){
TaskCards <- c(TaskCards, readTaskFile[row,col])
}else{
if((col-1) %/% 4 == 0){
TaskCard1 <- c(TaskCard1, readTaskFile[row,col])
}else if((col-1) %/% 4 == 1){
TaskCard2 <- c(TaskCard2, readTaskFile[row,col])
}else if((col-1) %/% 4 == 2){
TaskCard3 <- c(TaskCard3, readTaskFile[row,col])
}else if((col-1) %/% 4 == 3){
TaskCard4 <- c(TaskCard4, readTaskFile[row,col])
}else if((col-1) %/% 4 == 4){
TaskCard5 <- c(TaskCard5, readTaskFile[row,col])
}
}
}
### Data into Array ###
UserArray <- array(c(UserCard1,UserCard2,UserCard3,UserCard4,UserCard5), dim = c(vectorDim, difficulty))
UserDiffArray <- UserArray[,match(setdiff(UserCards,TaskCards),UserCards)]
TaskArray <- array(c(TaskCard1,TaskCard2,TaskCard3,TaskCard4,TaskCard5), dim = c(vectorDim, difficulty))
TaskDiffArray <- TaskArray[,match(setdiff(TaskCards,UserCards),TaskCards)]
### Analyse data ###
if(length(match(setdiff(TaskCards,UserCards),TaskCards)) == 0){
### Result ###
AccuracyResult <- c(AccuracyResult, 1)
EuclErrorResult <- c(EuclErrorResult, 0)
}else if(length(match(setdiff(TaskCards,UserCards),TaskCards)) == 1){
### Result ###
AccuracyResult <- c(AccuracyResult, (difficulty - length(match(setdiff(TaskCards,UserCards),TaskCards))) / difficulty)
EuclErrorResult <- c(EuclErrorResult, euclidean_dist(UserDiffArray, TaskDiffArray))
}else if(length(match(setdiff(TaskCards,UserCards),TaskCards)) > 1){
tmpVec <- c()
for (a in 1:length(UserDiffArray[1,])) {
for (b in 1:length(TaskDiffArray[1,])) {
dist <- euclidean_dist(UserDiffArray[,a], TaskDiffArray[,b])
tmpVec <- c(tmpVec,dist)
}
}
DistArray <- array(tmpVec, dim = c(length(UserDiffArray[1,]),length(TaskDiffArray[1,])))
### Result ###
AccuracyResult <- c(AccuracyResult, (difficulty - length(UserDiffArray[1,])) / difficulty)
EuclErrorResult <- c(EuclErrorResult, HungarianSolver(DistArray)$cost)
}
}
FinalResult <- cbind(AccuracyResult, EuclErrorResult, timeCal)
################################## write to CSV for presentation ########################
FinalResultTable <- data.frame()
FinalResultTable[nrow(FinalResultTable) + 1,] <- c("NA", "NA", "NA")
write.table(FinalResultTable, paste(c("../FinalResult_", par, ".csv"), collapse = ""), sep = ",", col.names = FALSE, row.names = FALSE)
################################## write to DataFrame for analysis #####################
condition1Result_Accuracy <- mean(AccuracyResult[1:5])
condition2Result_Accuracy <- mean(AccuracyResult[6:10])
condition3Result_Accuracy <- mean(AccuracyResult[11:15])
condition4Result_Accuracy <- mean(AccuracyResult[16:20])
condition1Result_EuclError <- mean(EuclErrorResult[1:5])
condition2Result_EuclError <- mean(EuclErrorResult[6:10])
condition3Result_EuclError <- mean(EuclErrorResult[11:15])
condition4Result_EuclError <- mean(EuclErrorResult[16:20])
if(par %% 4 == 1){
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition1Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition2Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition3Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition4Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition1Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition2Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition3Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition4Result_EuclError))
}else if(par %% 4 == 2){
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition1Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition2Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition3Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition4Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition1Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition2Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition3Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition4Result_EuclError))
}
else if(par %% 4 == 3){
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition1Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition2Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition3Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition4Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition1Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition2Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition3Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition4Result_EuclError))
}
else if(par %% 4 == 0){
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition1Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition2Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition3Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition4Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition1Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition2Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition3Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition4Result_EuclError))
}
}
}
finishedDF <- filter(AccuracyDF, AccuracyDF$Accuracy != 0)
finishedDF %>%
group_by(Furniture) %>%
summarise(avg= mean(Accuracy))
finishedDF %>%
group_by(Layout) %>%
summarise(avg= mean(Accuracy))
finishedDF %>%
group_by(Furniture) %>%
summarise(avg= mean(EuclideanError))
finishedDF %>%
group_by(Layout) %>%
summarise(avg= mean(EuclideanError))
### two-way ANOVA
res.aov_Accuracy <- aov(Accuracy ~ Layout + Furniture, data = finishedDF)
summary(res.aov_Accuracy)
effectsize(res.aov_Accuracy)
### Power Analysis
pwr.anova.test(k=2, f=0.3, sig.level =  0.05, power=0.8)
pwr.anova.test(k=2, f=0.3, sig.level =  0.05, n=32)
res.aov_EuclError <- aov(EuclideanError ~ Layout + Furniture, data = finishedDF)
summary(res.aov_EuclError)
effectsize(res.aov_EuclError)
### interaction efect
res.aov_Accuracy_Interaction <- aov(Accuracy ~ Layout * Furniture, data = finishedDF)
summary(res.aov_Accuracy_Interaction)
res.aov_EuclError_Interaction <- aov(EuclideanError ~ Layout * Furniture, data = finishedDF)
summary(res.aov_EuclError_Interaction)
### each condition as repeated-Measure ANOVA
finishedDF$Condition <- rep(c(1:4), times = NoParticipant)
modelAccuracy <- aov(Accuracy~factor(Condition)+Error(factor(Participant)), data = finishedDF)
effectsize(modelAccuracy)
modelEucliError <- aov(EuclideanError~factor(Condition)+Error(factor(Participant)), data = finishedDF)
effectsize(modelEucliError)
summary(modelAccuracy)
summary(modelEucliError)
View(FinalResultTable)
#install.packages("RcppHungarian")
#install.packages("effectsize")
#install.packages("pwr")
library(RcppHungarian)
library(ggplot2)
library(dplyr)
library("effectsize")
library("pwr")
### Functions ###
euclidean_dist <- function(x, y) sqrt(sum((x - y)^2))
### Pre-defined variables ###
set.seed(593903)
difficulty <- 5
vectorDim <- 3
removeDiscardedTrials <- TRUE
### initiate data frames for analysis
AccuracyDF <- data.frame(
Participant = rep(c(1:16), each = 4),
Furniture = rep(c("Has Furniture", "No Furniture", "Has Furniture", "No Furniture"), times = 16),
Layout = rep(c("Regular", "Irregular", "Irregular", "Regular"), times = 16),
Accuracy = rep(c(0), times = 64),
EuclideanError = rep(c(0), times = 64)
)
### testing ###
# setwd("~/R Projects/ARSpatialMemory/Data/participant 2")
# InteractionFilepattern <- list.files(pattern="*_Interaction.csv")
# readInteractionFile <- read.csv(InteractionFilepattern, header=TRUE)
NoParticipant <- 0
### Loop for all participant files
for(par in 1:16){
dirPath <- paste(c("~/R Projects/ARSpatialMemory/Data/participant", par), collapse = " ")
if(dir.exists(dirPath)){
setwd(dirPath)
NoParticipant <- NoParticipant + 1
### Experiment Data ###
UserFilePattern <- list.files(pattern="*_trialCards.csv")
TaskFilePattern <- list.files(pattern="*_answerCards.csv")
InteractionFilepattern <- list.files(pattern="*_Interaction.csv")
readUserFile <- read.csv(UserFilePattern, header=FALSE)
readTaskFile <- read.csv(TaskFilePattern, header=FALSE)
readInteractionFile <- read.csv(InteractionFilepattern, header=TRUE)
AccuracyResult<- c()
EuclErrorResult <- c()
### Calculate interaction time
InteractionFileSubset <- readInteractionFile[(readInteractionFile$Info == "Learning Phase" | readInteractionFile$Info == "Distractor") & readInteractionFile$TrialID != "Training",]
timeCal <- c()
rowN <- 1
while (rowN < nrow(InteractionFileSubset)) {
timeCal <- c(timeCal, InteractionFileSubset[rowN + 1, 1] - InteractionFileSubset[rowN, 1])
rowN <- rowN + 2
}
for(row in 1:nrow(readUserFile)){
UserCards <- c()
UserCard1 <- c()
UserCard2 <- c()
UserCard3 <- c()
UserCard4 <- c()
UserCard5 <- c()
TaskCards <- c()
TaskCard1 <- c()
TaskCard2 <- c()
TaskCard3 <- c()
TaskCard4 <- c()
TaskCard5 <- c()
for(col in 1:20){
if((col-1) %% 4 == 0){
UserCards <- c(UserCards, readUserFile[row,col])
}else{
if((col-1) %/% 4 == 0){
UserCard1 <- c(UserCard1, readUserFile[row,col])
}else if((col-1) %/% 4 == 1){
UserCard2 <- c(UserCard2, readUserFile[row,col])
}else if((col-1) %/% 4 == 2){
UserCard3 <- c(UserCard3, readUserFile[row,col])
}else if((col-1) %/% 4 == 3){
UserCard4 <- c(UserCard4, readUserFile[row,col])
}else if((col-1) %/% 4 == 4){
UserCard5 <- c(UserCard5, readUserFile[row,col])
}
}
}
for(col in 1:20){
if((col-1) %% 4 == 0){
TaskCards <- c(TaskCards, readTaskFile[row,col])
}else{
if((col-1) %/% 4 == 0){
TaskCard1 <- c(TaskCard1, readTaskFile[row,col])
}else if((col-1) %/% 4 == 1){
TaskCard2 <- c(TaskCard2, readTaskFile[row,col])
}else if((col-1) %/% 4 == 2){
TaskCard3 <- c(TaskCard3, readTaskFile[row,col])
}else if((col-1) %/% 4 == 3){
TaskCard4 <- c(TaskCard4, readTaskFile[row,col])
}else if((col-1) %/% 4 == 4){
TaskCard5 <- c(TaskCard5, readTaskFile[row,col])
}
}
}
### Data into Array ###
UserArray <- array(c(UserCard1,UserCard2,UserCard3,UserCard4,UserCard5), dim = c(vectorDim, difficulty))
UserDiffArray <- UserArray[,match(setdiff(UserCards,TaskCards),UserCards)]
TaskArray <- array(c(TaskCard1,TaskCard2,TaskCard3,TaskCard4,TaskCard5), dim = c(vectorDim, difficulty))
TaskDiffArray <- TaskArray[,match(setdiff(TaskCards,UserCards),TaskCards)]
### Analyse data ###
if(length(match(setdiff(TaskCards,UserCards),TaskCards)) == 0){
### Result ###
AccuracyResult <- c(AccuracyResult, 1)
EuclErrorResult <- c(EuclErrorResult, 0)
}else if(length(match(setdiff(TaskCards,UserCards),TaskCards)) == 1){
### Result ###
AccuracyResult <- c(AccuracyResult, (difficulty - length(match(setdiff(TaskCards,UserCards),TaskCards))) / difficulty)
EuclErrorResult <- c(EuclErrorResult, euclidean_dist(UserDiffArray, TaskDiffArray))
}else if(length(match(setdiff(TaskCards,UserCards),TaskCards)) > 1){
tmpVec <- c()
for (a in 1:length(UserDiffArray[1,])) {
for (b in 1:length(TaskDiffArray[1,])) {
dist <- euclidean_dist(UserDiffArray[,a], TaskDiffArray[,b])
tmpVec <- c(tmpVec,dist)
}
}
DistArray <- array(tmpVec, dim = c(length(UserDiffArray[1,]),length(TaskDiffArray[1,])))
### Result ###
AccuracyResult <- c(AccuracyResult, (difficulty - length(UserDiffArray[1,])) / difficulty)
EuclErrorResult <- c(EuclErrorResult, HungarianSolver(DistArray)$cost)
}
}
FinalResult <- cbind(AccuracyResult, EuclErrorResult, timeCal)
################################## write to CSV for presentation ########################
FinalResultCopy <- FinalResult
FinalResultTable <- data.frame()
for(trial in 1:24){
if((trial-1) %% 6 == 0){
FinalResultTable <- rbind(FinalResultTable, c("NA", "NA", "NA"))
}else{
FinalResultTable <- rbind(FinalResultTable, FinalResultCopy[1,])
FinalResultCopy <- FinalResultCopy[-1,]
}
}
write.table(FinalResultTable, paste(c("../FinalResult_", par, ".csv"), collapse = ""), sep = ",", col.names = FALSE, row.names = FALSE)
################################## write to DataFrame for analysis #####################
condition1Result_Accuracy <- mean(AccuracyResult[1:5])
condition2Result_Accuracy <- mean(AccuracyResult[6:10])
condition3Result_Accuracy <- mean(AccuracyResult[11:15])
condition4Result_Accuracy <- mean(AccuracyResult[16:20])
condition1Result_EuclError <- mean(EuclErrorResult[1:5])
condition2Result_EuclError <- mean(EuclErrorResult[6:10])
condition3Result_EuclError <- mean(EuclErrorResult[11:15])
condition4Result_EuclError <- mean(EuclErrorResult[16:20])
if(par %% 4 == 1){
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition1Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition2Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition3Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition4Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition1Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition2Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition3Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition4Result_EuclError))
}else if(par %% 4 == 2){
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition1Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition2Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition3Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition4Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition1Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition2Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition3Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition4Result_EuclError))
}
else if(par %% 4 == 3){
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition1Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition2Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition3Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition4Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition1Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition2Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition3Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition4Result_EuclError))
}
else if(par %% 4 == 0){
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition1Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition2Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition3Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition4Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition1Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition2Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition3Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition4Result_EuclError))
}
}
}
finishedDF <- filter(AccuracyDF, AccuracyDF$Accuracy != 0)
finishedDF %>%
group_by(Furniture) %>%
summarise(avg= mean(Accuracy))
finishedDF %>%
group_by(Layout) %>%
summarise(avg= mean(Accuracy))
finishedDF %>%
group_by(Furniture) %>%
summarise(avg= mean(EuclideanError))
finishedDF %>%
group_by(Layout) %>%
summarise(avg= mean(EuclideanError))
### two-way ANOVA
res.aov_Accuracy <- aov(Accuracy ~ Layout + Furniture, data = finishedDF)
summary(res.aov_Accuracy)
effectsize(res.aov_Accuracy)
### Power Analysis
pwr.anova.test(k=2, f=0.3, sig.level =  0.05, power=0.8)
pwr.anova.test(k=2, f=0.3, sig.level =  0.05, n=32)
res.aov_EuclError <- aov(EuclideanError ~ Layout + Furniture, data = finishedDF)
summary(res.aov_EuclError)
effectsize(res.aov_EuclError)
### interaction efect
res.aov_Accuracy_Interaction <- aov(Accuracy ~ Layout * Furniture, data = finishedDF)
summary(res.aov_Accuracy_Interaction)
res.aov_EuclError_Interaction <- aov(EuclideanError ~ Layout * Furniture, data = finishedDF)
summary(res.aov_EuclError_Interaction)
### each condition as repeated-Measure ANOVA
finishedDF$Condition <- rep(c(1:4), times = NoParticipant)
modelAccuracy <- aov(Accuracy~factor(Condition)+Error(factor(Participant)), data = finishedDF)
effectsize(modelAccuracy)
modelEucliError <- aov(EuclideanError~factor(Condition)+Error(factor(Participant)), data = finishedDF)
effectsize(modelEucliError)
summary(modelAccuracy)
summary(modelEucliError)
View(FinalResultTable)
