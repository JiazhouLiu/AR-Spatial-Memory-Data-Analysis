### Experiment Data ###
UserFilePattern <- list.files(pattern="*_trialCards.csv")
TaskFilePattern <- list.files(pattern="*_answerCards.csv")
InteractionFilepattern <- list.files(pattern="*_Interaction.csv")
readUserFile <- read.csv(UserFilePattern, header=FALSE)
readTaskFile <- read.csv(TaskFilePattern, header=FALSE)
readInteractionFile <- read.csv(InteractionFilepattern, header=TRUE)
AccuracyResult <- c()
EuclErrorResult <- c()
AccuracyResult_Modif <- c()
### Calculate interaction time
InteractionFileSubset <- readInteractionFile[(readInteractionFile$Info == "Learning Phase" | readInteractionFile$Info == "Distractor") & readInteractionFile$TrialID != "Training",]
timeCal <- c()
rowN <- 1
while (rowN < nrow(InteractionFileSubset)) {
timeCal <- c(timeCal, InteractionFileSubset[rowN + 1, 1] - InteractionFileSubset[rowN, 1])
rowN <- rowN + 2
}
for(row in 1:nrow(readUserFile)){
UserCards <- c()
UserCard1 <- c()
UserCard2 <- c()
UserCard3 <- c()
UserCard4 <- c()
UserCard5 <- c()
TaskCards <- c()
TaskCard1 <- c()
TaskCard2 <- c()
TaskCard3 <- c()
TaskCard4 <- c()
TaskCard5 <- c()
for(col in 1:20){
if((col-1) %% 4 == 0){
UserCards <- c(UserCards, readUserFile[row,col])
}else{
if((col-1) %/% 4 == 0){
UserCard1 <- c(UserCard1, readUserFile[row,col])
}else if((col-1) %/% 4 == 1){
UserCard2 <- c(UserCard2, readUserFile[row,col])
}else if((col-1) %/% 4 == 2){
UserCard3 <- c(UserCard3, readUserFile[row,col])
}else if((col-1) %/% 4 == 3){
UserCard4 <- c(UserCard4, readUserFile[row,col])
}else if((col-1) %/% 4 == 4){
UserCard5 <- c(UserCard5, readUserFile[row,col])
}
}
}
for(col in 1:20){
if((col-1) %% 4 == 0){
TaskCards <- c(TaskCards, readTaskFile[row,col])
}else{
if((col-1) %/% 4 == 0){
TaskCard1 <- c(TaskCard1, readTaskFile[row,col])
}else if((col-1) %/% 4 == 1){
TaskCard2 <- c(TaskCard2, readTaskFile[row,col])
}else if((col-1) %/% 4 == 2){
TaskCard3 <- c(TaskCard3, readTaskFile[row,col])
}else if((col-1) %/% 4 == 3){
TaskCard4 <- c(TaskCard4, readTaskFile[row,col])
}else if((col-1) %/% 4 == 4){
TaskCard5 <- c(TaskCard5, readTaskFile[row,col])
}
}
}
### calculate modified accuracy
Usercards_Modif <- UserCards %% 12
TaskCards_Modif <- TaskCards %% 12
### Data into Array ###
UserArray <- array(c(UserCard1,UserCard2,UserCard3,UserCard4,UserCard5), dim = c(vectorDim, difficulty))
UserDiffArray <- UserArray[,match(setdiff(UserCards,TaskCards),UserCards)]
TaskArray <- array(c(TaskCard1,TaskCard2,TaskCard3,TaskCard4,TaskCard5), dim = c(vectorDim, difficulty))
TaskDiffArray <- TaskArray[,match(setdiff(TaskCards,UserCards),TaskCards)]
### Analyse data ###
if(length(match(setdiff(TaskCards,UserCards),TaskCards)) == 0){
### Result ###
AccuracyResult <- c(AccuracyResult, 1)
EuclErrorResult <- c(EuclErrorResult, 0)
}else if(length(match(setdiff(TaskCards,UserCards),TaskCards)) == 1){
### Result ###
AccuracyResult <- c(AccuracyResult, (difficulty - length(match(setdiff(TaskCards,UserCards),TaskCards))) / difficulty)
EuclErrorResult <- c(EuclErrorResult, euclidean_dist(UserDiffArray, TaskDiffArray))
}else if(length(match(setdiff(TaskCards,UserCards),TaskCards)) > 1){
tmpVec <- c()
for (a in 1:length(UserDiffArray[1,])) {
for (b in 1:length(TaskDiffArray[1,])) {
dist <- euclidean_dist(UserDiffArray[,a], TaskDiffArray[,b])
tmpVec <- c(tmpVec,dist)
}
}
DistArray <- array(tmpVec, dim = c(length(UserDiffArray[1,]),length(TaskDiffArray[1,])))
### Result ###
AccuracyResult <- c(AccuracyResult, (difficulty - length(UserDiffArray[1,])) / difficulty)
EuclErrorResult <- c(EuclErrorResult, HungarianSolver(DistArray)$cost)
}
### calculate modif accuracy
AccuracyResult_Modif <- c(AccuracyResult_Modif, (difficulty - length(match(setdiff(TaskCards_Modif,Usercards_Modif),TaskCards_Modif))) / difficulty)
}
FinalResult <- data.frame(cbind(AccuracyResult, AccuracyResult_Modif, EuclErrorResult, timeCal))
################################## write to CSV for presentation ########################
#FinalResultTable <- rbind(c("NA", "NA", "NA"), FinalResult[1:5,], c("NA", "NA", "NA"), FinalResult[6:10,], c("NA", "NA", "NA"), FinalResult[11:15,], c("NA", "NA", "NA"), FinalResult[16:20,])
#write.table(FinalResultTable, paste(c("../FinalResult_", par, ".csv"), collapse = ""), sep = ",", col.names = FALSE, row.names = FALSE)
################################## write to DataFrame for analysis #####################
Condition1DF <- FinalResult[1:5, ]
Condition2DF <- FinalResult[6:10, ]
Condition3DF <- FinalResult[11:15, ]
Condition4DF <- FinalResult[16:20, ]
if(removeDiscardedTrials){
Condition1DF<- Condition1DF[Condition1DF$timeCal < removeDiscardedTrialsTimeout, ]
Condition2DF<- Condition2DF[Condition2DF$timeCal < removeDiscardedTrialsTimeout, ]
Condition3DF<- Condition3DF[Condition3DF$timeCal < removeDiscardedTrialsTimeout, ]
Condition4DF<- Condition4DF[Condition4DF$timeCal < removeDiscardedTrialsTimeout, ]
}
condition1Result_Accuracy <- mean(Condition1DF$AccuracyResult)
condition2Result_Accuracy <- mean(Condition2DF$AccuracyResult)
condition3Result_Accuracy <- mean(Condition3DF$AccuracyResult)
condition4Result_Accuracy <- mean(Condition4DF$AccuracyResult)
condition1Result_Accuracy_Modif <- mean(Condition1DF$AccuracyResult_Modif)
condition2Result_Accuracy_Modif <- mean(Condition2DF$AccuracyResult_Modif)
condition3Result_Accuracy_Modif <- mean(Condition3DF$AccuracyResult_Modif)
condition4Result_Accuracy_Modif <- mean(Condition4DF$AccuracyResult_Modif)
condition1Result_EuclError <- mean(Condition1DF$EuclErrorResult)
condition2Result_EuclError <- mean(Condition2DF$EuclErrorResult)
condition3Result_EuclError <- mean(Condition3DF$EuclErrorResult)
condition4Result_EuclError <- mean(Condition4DF$EuclErrorResult)
if(par %% 4 == 1){
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition1Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition2Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition3Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition4Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition1Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition2Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition3Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition4Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition1Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition2Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition3Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition4Result_EuclError))
}else if(par %% 4 == 2){
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition1Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition2Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition3Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition4Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition1Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition2Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition3Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition4Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition1Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition2Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition3Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition4Result_EuclError))
}
else if(par %% 4 == 3){
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition1Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition2Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition3Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition4Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition1Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition2Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition3Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition4Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition1Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition2Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition3Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition4Result_EuclError))
}
else if(par %% 4 == 0){
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition1Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition2Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition3Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition4Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition1Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition2Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition3Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition4Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition1Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition2Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition3Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition4Result_EuclError))
}
}
}
## remove non-participated rows
data.accuracy <- filter(AccuracyDF, AccuracyDF$Accuracy != 0)
data.accuracy <- data.accuracy %>% mutate(Condition = as.factor(Condition),
Furniture = as.factor(Furniture),
Layout = as.factor(Layout))
data.accuracy.female <- filter(data.accuracy, data.accuracy$Participant <= 8)
data.accuracy.male  <- filter(data.accuracy, data.accuracy$Participant > 8)
data.accuracy <- data.accuracy %>% mutate(Participant = as.factor(Participant))
data.accuracy.female <- data.accuracy.female %>% mutate(Participant = as.factor(Participant))
data.accuracy.male <- data.accuracy.male %>% mutate(Participant = as.factor(Participant))
setwd("~/R Projects/ARSpatialMemory-R")
save(data.accuracy, file = "data.accuracy.Rdata")
save(data.accuracy.female, file = "data.accuracy.female.Rdata")
save(data.accuracy.male, file = "data.accuracy.male.Rdata")
library(ggplot2)
library(dplyr)
library(pwr)
library(Rmisc)
library(ARTool)
library(stats)
library(effectsize)
plotData <- function(m){
d <- Rmisc::summarySE(data.subjective, measurevar = m, groupvars = c("Condition"))
}
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE),
se = sd(x[[col]], na.rm=TRUE)/sqrt(12),
ic = sd(x[[col]], na.rm=TRUE)/sqrt(12) * qt((1-0.05)/2 + .5, 11))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
load("data.accuracy.Rdata")
load("data.accuracy.male.Rdata")
load("data.accuracy.female.Rdata")
View(data.accuracy)
shapiro.test(data.accuracy$Accuracy)
shapiro.test(data.accuracy$Accuracy_Modif)
shapiro.test(data.accuracy$EuclideanError)
art.accuracy <- art(Accuracy ~ Furniture * Layout + Error(Participant), data = data.accuracy)
art.accuracy.furniture <- art(Accuracy ~ Furniture + Error(Participant), data = data.accuracy)
art.accuracy.layout <- art(Accuracy ~ Layout + Error(Participant), data = data.accuracy)
data.accuracy %>%
group_by(Furniture) %>%
summarise(avg= mean(Accuracy))
data.accuracy %>%
group_by(Layout) %>%
summarise(avg= mean(Accuracy))
data.accuracy %>%
group_by(Furniture) %>%
summarise(avg= mean(Accuracy_Modif))
data.accuracy %>%
group_by(Layout) %>%
summarise(avg= mean(Accuracy_Modif))
data.accuracy %>%
group_by(Furniture) %>%
summarise(avg= mean(EuclideanError))
data.accuracy %>%
group_by(Layout) %>%
summarise(avg= mean(EuclideanError))
data.accuracy %>%
group_by(Furniture) %>%
summarise(avg= mean(Accuracy))
mean.furniture.accuracy <- data.accuracy %>%
group_by(Furniture) %>%
summarise(avg= mean(Accuracy))
mean.layout.accuracy <- data.accuracy %>%
group_by(Layout) %>%
summarise(avg= mean(Accuracy))
mean.furniture.ModifAccuracy <- data.accuracy %>%
group_by(Furniture) %>%
summarise(avg= mean(Accuracy_Modif))
mean.layout.ModifAccuracy <- data.accuracy %>%
group_by(Layout) %>%
summarise(avg= mean(Accuracy_Modif))
mean.furniture.euclidean <- data.accuracy %>%
group_by(Furniture) %>%
summarise(avg= mean(EuclideanError))
mean.layout.euclidean <- data.accuracy %>%
group_by(Layout) %>%
summarise(avg= mean(EuclideanError))
model.accuracy  <- anova(art.accuracy)
model.accuracy
eta_squared(model.accuracy)
library(ggplot2)
library(dplyr)
library(pwr)
library(Rmisc)
library(ARTool)
library(stats)
library(effectsize)
plotData <- function(m){
d <- Rmisc::summarySE(data.subjective, measurevar = m, groupvars = c("Condition"))
}
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE),
se = sd(x[[col]], na.rm=TRUE)/sqrt(12),
ic = sd(x[[col]], na.rm=TRUE)/sqrt(12) * qt((1-0.05)/2 + .5, 11))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
load("data.accuracy.Rdata")
load("data.accuracy.male.Rdata")
load("data.accuracy.female.Rdata")
shapiro.test(data.accuracy$Accuracy)
shapiro.test(data.accuracy$Accuracy_Modif)
shapiro.test(data.accuracy$EuclideanError)
mean.furniture.accuracy <- data.accuracy %>%
group_by(Furniture) %>%
summarise(avg= mean(Accuracy))
mean.layout.accuracy <- data.accuracy %>%
group_by(Layout) %>%
summarise(avg= mean(Accuracy))
mean.furniture.ModifAccuracy <- data.accuracy %>%
group_by(Furniture) %>%
summarise(avg= mean(Accuracy_Modif))
mean.layout.ModifAccuracy <- data.accuracy %>%
group_by(Layout) %>%
summarise(avg= mean(Accuracy_Modif))
mean.furniture.euclidean <- data.accuracy %>%
group_by(Furniture) %>%
summarise(avg= mean(EuclideanError))
mean.layout.euclidean <- data.accuracy %>%
group_by(Layout) %>%
summarise(avg= mean(EuclideanError))
art.accuracy <- art(Accuracy ~ Furniture * Layout + Error(Participant), data = data.accuracy)
art.accuracy.furniture <- art(Accuracy ~ Furniture + Error(Participant), data = data.accuracy)
art.accuracy.layout <- art(Accuracy ~ Layout + Error(Participant), data = data.accuracy)
model.accuracy  <- anova(art.accuracy)
model.accuracy
eta_squared(model.accuracy)
library(tidyverse)
library(Rmisc)
library(ARTool)
library(stats)
library(effectsize)
plotData <- function(m){
d <- Rmisc::summarySE(data.subjective, measurevar = m, groupvars = c("Condition"))
}
load("data.subjective.Rdata")
shapiro.test(data.subjective$Mental)
art.m.both <- art(Mental ~ Furniture * Layout + Error(PID), data = data.subjective)
art.m.furniture <- art(Mental ~ Furniture + Error(PID), data = data.subjective)
art.m.layout <- art(Mental ~ Layout + Error(PID), data = data.subjective)
bartlett.test(Mental ~ interaction(Furniture,Layout), data = data.subjective)
model.m.both <- anova(art.m.both)
model.m.both
eta_squared(model.m.both)
model.m.furniture <- anova(art.m.furniture)
model.m.furniture
eta_squared(model.m.furniture)
model.m.layout <- anova(art.m.layout)
model.m.layout
d <- Rmisc::summarySE(data.subjective, measurevar = "Mental", groupvars = c("Condition"))
ggplot(d, aes(x = Condition, y = Mental)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Mental-ci, ymax=Mental+ci))
shapiro.test(data.subjective$Physical)
art.p.both <- art(Physical ~ Furniture * Layout + Error(PID), data = data.subjective)
art.p.furniture <- art(Physical ~ Furniture + Error(PID), data = data.subjective)
art.p.layout <- art(Physical ~ Layout + Error(PID), data = data.subjective)
bartlett.test(Physical ~ interaction(Furniture,Layout), data = data.subjective)
model.p.both <- anova(art.p.both)
model.p.both
eta_squared(model.p.both)
model.p.furniture <- anova(art.p.furniture)
model.p.furniture
eta_squared(model.p.furniture)
model.p.layout <- anova(art.p.layout)
model.p.layout
d <- Rmisc::summarySE(data.subjective, measurevar = "Physical", groupvars = c("Condition"))
ggplot(d, aes(x = Condition, y = Physical)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Physical-ci, ymax=Physical+ci))
shapiro.test(data.subjective$Temporal)
art.t.both <- art(Temporal ~ Furniture * Layout + Error(PID), data = data.subjective)
art.t.furniture <- art(Temporal ~ Furniture + Error(PID), data = data.subjective)
art.t.layout <- art(Temporal ~ Layout + Error(PID), data = data.subjective)
bartlett.test(Temporal ~ interaction(Furniture,Layout), data = data.subjective)
model.t.both <- anova(art.t.both)
model.t.both
model.t.furniture <- anova(art.t.furniture)
model.t.furniture
model.t.layout <- anova(art.t.layout)
model.t.layout
d <- Rmisc::summarySE(data.subjective, measurevar = "Temporal", groupvars = c("Condition"))
ggplot(d, aes(x = Condition, y = Temporal)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Temporal-ci, ymax=Temporal+ci))
shapiro.test(data.subjective$Performance)
art.s.both <- art(Performance ~ Furniture * Layout + Error(PID), data = data.subjective)
art.s.furniture <- art(Performance ~ Furniture + Error(PID), data = data.subjective)
art.s.layout <- art(Performance ~ Layout + Error(PID), data = data.subjective)
bartlett.test(Performance ~ interaction(Furniture,Layout), data = data.subjective)
model.s.both <- anova(art.s.both)
model.s.both
eta_squared(model.s.both)
model.s.furniture <- anova(art.s.furniture)
model.s.furniture
eta_squared(model.s.furniture)
model.s.layout <- anova(art.s.layout)
model.s.layout
d <- Rmisc::summarySE(data.subjective, measurevar = "Performance", groupvars = c("Condition"))
ggplot(d, aes(x = Condition, y = Performance)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Performance-ci, ymax=Performance+ci))
shapiro.test(data.subjective$Effort)
art.e.both <- art(Effort ~ Furniture * Layout + Error(PID), data = data.subjective)
art.e.furniture <- art(Effort ~ Furniture + Error(PID), data = data.subjective)
art.e.layout <- art(Effort ~ Layout + Error(PID), data = data.subjective)
bartlett.test(Effort ~ interaction(Furniture,Layout), data = data.subjective)
model.e.both <- anova(art.e.both)
model.e.both
eta_squared(model.e.both)
model.e.furniture <- anova(art.e.furniture)
model.e.furniture
eta_squared(model.e.furniture)
model.e.layout <- anova(art.e.layout)
model.e.layout
d <- Rmisc::summarySE(data.subjective, measurevar = "Effort", groupvars = c("Condition"))
ggplot(d, aes(x = Condition, y = Effort)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Effort-ci, ymax=Effort+ci))
shapiro.test(data.subjective$Frustration)
art.f.both <- art(Frustration ~ Furniture * Layout + Error(PID), data = data.subjective)
art.f.furniture <- art(Frustration ~ Furniture + Error(PID), data = data.subjective)
art.f.layout <- art(Frustration ~ Layout + Error(PID), data = data.subjective)
bartlett.test(Frustration ~ interaction(Furniture,Layout), data = data.subjective)
model.f.both <- anova(art.f.both)
model.f.both
eta_squared(model.f.both)
model.f.furniture <- anova(art.f.furniture)
model.f.furniture
eta_squared(model.f.furniture)
model.f.layout <- anova(art.f.layout)
model.f.layout
d <- Rmisc::summarySE(data.subjective, measurevar = "Frustration", groupvars = c("Condition"))
ggplot(d, aes(x = Condition, y = Frustration)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Frustration-ci, ymax=Frustration+ci))
shapiro.test(data.subjective$Mean)
art.mean.both <- art(Mean ~ Furniture * Layout + Error(PID), data = data.subjective)
art.mean.furniture <- art(Mean ~ Furniture + Error(PID), data = data.subjective)
art.mean.layout <- art(Mean ~ Layout + Error(PID), data = data.subjective)
bartlett.test(Mean ~ interaction(Furniture,Layout), data = data.subjective)
model.mean.both <- anova(art.mean.both)
model.mean.both
eta_squared(model.mean.both)
model.mean.furniture <- anova(art.mean.furniture)
model.mean.furniture
eta_squared(model.mean.furniture)
model.mean.layout <- anova(art.mean.layout)
model.mean.layout
d <- Rmisc::summarySE(data.subjective, measurevar = "Mean", groupvars = c("Condition"))
ggplot(d, aes(x = Condition, y = Mean)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Mean-ci, ymax=Mean+ci))
mean_Chart <- aggregate(cbind(Mental, Physical, Temporal, Performance, Effort, Frustration, Mean)~Furniture , data=data.subjective , mean)
rownames(mean_Chart) <- mean_Chart[,1]
mean_Chart <- as.matrix(mean_Chart[,-1])
lim <- 1.2*max(mean_Chart)
error.bar <- function(x, y, upper, lower=upper, length=0.1,...){
arrows(x,y+upper, x, y-lower, angle=90, code=3, length=length, ...)
}
stdev_Chart <- aggregate(cbind(Mental, Physical, Temporal, Performance, Effort, Frustration, Mean)~Furniture , data=data.subjective , sd)
rownames(stdev_Chart) <- stdev_Chart[,1]
se_Baseline <- as.matrix(stdev_Chart[,-1]) / sqrt(12)
ze_barplot <- barplot(mean_Chart , beside=T , legend.text=T,col=c("#ed7d31", "#4472c4") , ylim=c(0,lim) , ylab="NASA-TLX Score", args.legend = list(x = "topright", inset = c(0, -0.15)), cex.names=0.8)
error.bar(ze_barplot, mean_Chart, se_Baseline)
load("data.rating.Rdata")
shapiro.test(data.rating$Rating)
art.rating.both <- art(Rating ~ Furniture * Layout + Error(PID), data = data.rating)
art.rating.furniture <- art(Rating ~ Furniture + Error(PID), data = data.rating)
art.rating.layout <- art(Rating ~ Layout + Error(PID), data = data.rating)
bartlett.test(Rating ~ interaction(Furniture,Layout), data = data.rating)
model.rating.both <- anova(art.rating.both)
model.rating.both
eta_squared(model.rating.both)
model.rating.furniture <- anova(art.rating.furniture)
model.rating.furniture
eta_squared(model.rating.furniture)
model.rating.layout <- anova(art.rating.layout)
model.rating.layout
d <- Rmisc::summarySE(data.rating, measurevar = "Rating", groupvars = c("Condition"))
ggplot(d, aes(x = Condition, y = Rating)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Rating-ci, ymax=Rating+ci))
