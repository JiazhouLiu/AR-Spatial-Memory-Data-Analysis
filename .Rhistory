model.accuracy.condition <- anova(art.accuracy.condition)
model.accuracy.condition
model.accuracy.condition <- anova(art.accuracy.condition)
model.accuracy.condition
eta_squared(model.accuracy.condition)
model.accuracy.condition <- anova(art.accuracy.condition)
model.accuracy.condition
### Analysis of Two Factors combination
#### Check Homogenity
```{r}
TukeyHSD(model.accuracy.condition)
TukeyHSD(model.accuracy.condition)
summary(model.accuracy.condition)
model.accuracy.condition
library(multcomp)
post_test <- glht(model.accuracy.condition,
linfct = mcp(species = "Tukey")
)
marginal = art.con(model.accuracy.condition, "Condition")
marginal = art.con(art.accuracy.condition, "Condition")
marginal = art.con(art.accuracy.condition, "Condition")
marginal
marginal = art.con(art.accuracy.condition, "Condition")
marginal
Sum = as.data.frame(marginal)
library(rcompanion)
install.packages(rcompanion)
install.packages("rcompanion")
library(rcompanion)
cldList(p.value ~ contrast, data=Sum)
model.accuracy.condition$part.eta.sq = with(model.accuracy.condition, `Sum Sq`/(`Sum Sq` + `Sum Sq.res`))
model.accuracy.condition
eta_squared(model.accuracy.condition)
model.accuracy.condition$part.eta.sq = with(model.accuracy.condition, `Sum Sq`/(`Sum Sq` + `Sum Sq.res`))
model.accuracy.condition
marginal
library(ggplot2)
library(dplyr)
library(pwr)
library(Rmisc)
library(ARTool)
library(stats)
plotData <- function(m){
d <- Rmisc::summarySE(data.subjective, measurevar = m, groupvars = c("Condition"))
}
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE),
se = sd(x[[col]], na.rm=TRUE)/sqrt(12),
ic = sd(x[[col]], na.rm=TRUE)/sqrt(12) * qt((1-0.05)/2 + .5, 11))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
library(ggplot2)
library(dplyr)
library(pwr)
library(Rmisc)
library(ARTool)
library(stats)
plotData <- function(m){
d <- Rmisc::summarySE(data.subjective, measurevar = m, groupvars = c("Condition"))
}
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE),
se = sd(x[[col]], na.rm=TRUE)/sqrt(12),
ic = sd(x[[col]], na.rm=TRUE)/sqrt(12) * qt((1-0.05)/2 + .5, 11))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
library(ggplot2)
library(dplyr)
library(pwr)
library(Rmisc)
library(ARTool)
library(stats)
plotData <- function(m){
d <- Rmisc::summarySE(data.subjective, measurevar = m, groupvars = c("Condition"))
}
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE),
se = sd(x[[col]], na.rm=TRUE)/sqrt(12),
ic = sd(x[[col]], na.rm=TRUE)/sqrt(12) * qt((1-0.05)/2 + .5, 11))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
load("data.accuracy.Rdata")
load("data.accuracy.male.Rdata")
load("data.accuracy.female.Rdata")
shapiro.test(data.accuracy$Accuracy)
shapiro.test(data.accuracy$Accuracy_Modif)
shapiro.test(data.accuracy$EuclideanError)
mean.furniture.accuracy <- data.accuracy %>%
group_by(Furniture) %>%
summarise(avg= mean(Accuracy))
mean.layout.accuracy <- data.accuracy %>%
group_by(Layout) %>%
summarise(avg= mean(Accuracy))
art.accuracy.interaction <- art(Accuracy ~ Furniture * Layout + Error(Participant), data = data.accuracy)
art.accuracy.condition <- art(Accuracy ~ Condition + Error(Participant), data = data.accuracy)
art.accuracy.furniture <- art(Accuracy ~ Furniture + Error(Participant), data = data.accuracy)
art.accuracy.layout <- art(Accuracy ~ Layout + Error(Participant), data = data.accuracy)
bartlett.test(Accuracy ~ interaction(Furniture, Layout), data = data.accuracy)
model.accuracy <- anova(art.accuracy)
model.accuracy
model.accuracy <- anova(art.accuracy)
model.accuracy <- anova(art.accuracy)
art.accuracy <- art(Accuracy ~ Furniture * Layout + Error(Participant), data = data.accuracy)
art.accuracy.condition <- art(Accuracy ~ Condition + Error(Participant), data = data.accuracy)
art.accuracy.furniture <- art(Accuracy ~ Furniture + Error(Participant), data = data.accuracy)
art.accuracy.layout <- art(Accuracy ~ Layout + Error(Participant), data = data.accuracy)
model.accuracy <- anova(art.accuracy)
model.accuracy
model.accuracy <- anova(art.accuracy)
model.accuracy$part.eta.sq = with(model.accuracy, `Sum Sq`/(`Sum Sq` + `Sum Sq.res`))
model.accuracy
eta_squared(model.accuracy)
bartlett.test(Accuracy ~ Furniture, data = data.accuracy)
del.accuracy.furniture <- anova(art.accuracy.furniture)
model.accuracy.furniture$part.eta.sq = with(model.accuracy.furniture, `Sum Sq`/(`Sum Sq` + `Sum Sq.res`))
model.accuracy.furniture <- anova(art.accuracy.furniture)
model.accuracy.furniture$part.eta.sq = with(model.accuracy.furniture, `Sum Sq`/(`Sum Sq` + `Sum Sq.res`))
model.accuracy.furniture
bartlett.test(Accuracy ~ Layout, data = data.accuracy)
model.accuracy.layout<- anova(art.accuracy.layout)
model.accuracy.layout$part.eta.sq = with(model.accuracy.layout, `Sum Sq`/(`Sum Sq` + `Sum Sq.res`))
model.accuracy.layout
bartlett.test(Accuracy ~ Condition, data = data.accuracy)
model.accuracy.condition <- anova(art.accuracy.condition)
model.accuracy.condition$part.eta.sq = with(model.accuracy.condition, `Sum Sq`/(`Sum Sq` + `Sum Sq.res`))
model.accuracy.condition
marginal = art.con(art.accuracy.condition, "Condition")
marginal
d <- Rmisc::summarySE(data.accuracy, measurevar = "Accuracy", groupvars = c("Condition"))
ggplot(d, aes(x = Condition, y = Accuracy)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Accuracy-ci, ymax=Accuracy+ci))
d <- Rmisc::summarySE(data.accuracy, measurevar = "Accuracy", groupvars = c("Layout"))
ggplot(d, aes(x = Layout, y = Accuracy)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Accuracy-ci, ymax=Accuracy+ci))
d <- Rmisc::summarySE(data.accuracy, measurevar = "Accuracy", groupvars = c("Furniture"))
ggplot(d, aes(x = Furniture, y = Accuracy)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Accuracy-ci, ymax=Accuracy+ci))
View(data.accuracy)
library(RcppHungarian)
library(dplyr)
library(tidyverse)
### Functions ###
euclidean_dist <- function(x, y) sqrt(sum((x - y)^2))
### Pre-defined variables ###
set.seed(593903)
difficulty <- 5
vectorDim <- 3
removeDiscardedTrials <- TRUE
removeDiscardedTrialsTimeout <- 30
### initiate data frames for analysis
AccuracyDF <- data.frame(
Participant = rep(c(1:16), each = 4),
Condition = rep(c("Has+Regular", "No+Irregular", "Has+Irregular", "No+Regular"), times = 16),
Furniture = rep(c("Has Furniture", "No Furniture", "Has Furniture", "No Furniture"), times = 16),
Layout = rep(c("Regular", "Irregular", "Irregular", "Regular"), times = 16),
Accuracy = rep(c(0), times = 64),
Accuracy_Modif = rep(c(0), times = 64),
EuclideanError = rep(c(0), times = 64)
)
NoParticipant <- 0
### Loop for all participant files
for(par in 1:16){
dirPath <- paste(c("~/R Projects/ARSpatialMemory-R/Data/participant", par), collapse = " ")
if(dir.exists(dirPath)){
setwd(dirPath)
NoParticipant <- NoParticipant + 1
### Experiment Data ###
UserFilePattern <- list.files(pattern="*_trialCards.csv")
TaskFilePattern <- list.files(pattern="*_answerCards.csv")
InteractionFilepattern <- list.files(pattern="*_Interaction.csv")
readUserFile <- read.csv(UserFilePattern, header=FALSE)
readTaskFile <- read.csv(TaskFilePattern, header=FALSE)
readInteractionFile <- read.csv(InteractionFilepattern, header=TRUE)
AccuracyResult <- c()
EuclErrorResult <- c()
AccuracyResult_Modif <- c()
### Calculate interaction time
InteractionFileSubset <- readInteractionFile[(readInteractionFile$Info == "Learning Phase" | readInteractionFile$Info == "Distractor") & readInteractionFile$TrialID != "Training",]
timeCal <- c()
rowN <- 1
while (rowN < nrow(InteractionFileSubset)) {
timeCal <- c(timeCal, InteractionFileSubset[rowN + 1, 1] - InteractionFileSubset[rowN, 1])
rowN <- rowN + 2
}
for(row in 1:nrow(readUserFile)){
UserCards <- c()
UserCard1 <- c()
UserCard2 <- c()
UserCard3 <- c()
UserCard4 <- c()
UserCard5 <- c()
TaskCards <- c()
TaskCard1 <- c()
TaskCard2 <- c()
TaskCard3 <- c()
TaskCard4 <- c()
TaskCard5 <- c()
for(col in 1:20){
if((col-1) %% 4 == 0){
UserCards <- c(UserCards, readUserFile[row,col])
}else{
if((col-1) %/% 4 == 0){
UserCard1 <- c(UserCard1, readUserFile[row,col])
}else if((col-1) %/% 4 == 1){
UserCard2 <- c(UserCard2, readUserFile[row,col])
}else if((col-1) %/% 4 == 2){
UserCard3 <- c(UserCard3, readUserFile[row,col])
}else if((col-1) %/% 4 == 3){
UserCard4 <- c(UserCard4, readUserFile[row,col])
}else if((col-1) %/% 4 == 4){
UserCard5 <- c(UserCard5, readUserFile[row,col])
}
}
}
for(col in 1:20){
if((col-1) %% 4 == 0){
TaskCards <- c(TaskCards, readTaskFile[row,col])
}else{
if((col-1) %/% 4 == 0){
TaskCard1 <- c(TaskCard1, readTaskFile[row,col])
}else if((col-1) %/% 4 == 1){
TaskCard2 <- c(TaskCard2, readTaskFile[row,col])
}else if((col-1) %/% 4 == 2){
TaskCard3 <- c(TaskCard3, readTaskFile[row,col])
}else if((col-1) %/% 4 == 3){
TaskCard4 <- c(TaskCard4, readTaskFile[row,col])
}else if((col-1) %/% 4 == 4){
TaskCard5 <- c(TaskCard5, readTaskFile[row,col])
}
}
}
### calculate modified accuracy
Usercards_Modif <- UserCards %% 12
TaskCards_Modif <- TaskCards %% 12
### Data into Array ###
UserArray <- array(c(UserCard1,UserCard2,UserCard3,UserCard4,UserCard5), dim = c(vectorDim, difficulty))
UserDiffArray <- UserArray[,match(setdiff(UserCards,TaskCards),UserCards)]
TaskArray <- array(c(TaskCard1,TaskCard2,TaskCard3,TaskCard4,TaskCard5), dim = c(vectorDim, difficulty))
TaskDiffArray <- TaskArray[,match(setdiff(TaskCards,UserCards),TaskCards)]
### Analyse data ###
if(length(match(setdiff(TaskCards,UserCards),TaskCards)) == 0){
### Result ###
AccuracyResult <- c(AccuracyResult, 1)
EuclErrorResult <- c(EuclErrorResult, 0)
}else if(length(match(setdiff(TaskCards,UserCards),TaskCards)) == 1){
### Result ###
AccuracyResult <- c(AccuracyResult, (difficulty - length(match(setdiff(TaskCards,UserCards),TaskCards))) / difficulty)
EuclErrorResult <- c(EuclErrorResult, euclidean_dist(UserDiffArray, TaskDiffArray))
}else if(length(match(setdiff(TaskCards,UserCards),TaskCards)) > 1){
tmpVec <- c()
for (a in 1:length(UserDiffArray[1,])) {
for (b in 1:length(TaskDiffArray[1,])) {
dist <- euclidean_dist(UserDiffArray[,a], TaskDiffArray[,b])
tmpVec <- c(tmpVec,dist)
}
}
DistArray <- array(tmpVec, dim = c(length(UserDiffArray[1,]),length(TaskDiffArray[1,])))
### Result ###
AccuracyResult <- c(AccuracyResult, (difficulty - length(UserDiffArray[1,])) / difficulty)
EuclErrorResult <- c(EuclErrorResult, HungarianSolver(DistArray)$cost)
}
### calculate modif accuracy
AccuracyResult_Modif <- c(AccuracyResult_Modif, (difficulty - length(match(setdiff(TaskCards_Modif,Usercards_Modif),TaskCards_Modif))) / difficulty)
}
FinalResult <- data.frame(cbind(AccuracyResult, AccuracyResult_Modif, EuclErrorResult, timeCal))
################################## write to CSV for presentation ########################
#FinalResultTable <- rbind(c("NA", "NA", "NA"), FinalResult[1:5,], c("NA", "NA", "NA"), FinalResult[6:10,], c("NA", "NA", "NA"), FinalResult[11:15,], c("NA", "NA", "NA"), FinalResult[16:20,])
#write.table(FinalResultTable, paste(c("../FinalResult_", par, ".csv"), collapse = ""), sep = ",", col.names = FALSE, row.names = FALSE)
################################## write to DataFrame for analysis #####################
Condition1DF <- FinalResult[1:5, ]
Condition2DF <- FinalResult[6:10, ]
Condition3DF <- FinalResult[11:15, ]
Condition4DF <- FinalResult[16:20, ]
if(removeDiscardedTrials){
Condition1DF<- Condition1DF[Condition1DF$timeCal < removeDiscardedTrialsTimeout, ]
Condition2DF<- Condition2DF[Condition2DF$timeCal < removeDiscardedTrialsTimeout, ]
Condition3DF<- Condition3DF[Condition3DF$timeCal < removeDiscardedTrialsTimeout, ]
Condition4DF<- Condition4DF[Condition4DF$timeCal < removeDiscardedTrialsTimeout, ]
}
condition1Result_Accuracy <- mean(Condition1DF$AccuracyResult)
condition2Result_Accuracy <- mean(Condition2DF$AccuracyResult)
condition3Result_Accuracy <- mean(Condition3DF$AccuracyResult)
condition4Result_Accuracy <- mean(Condition4DF$AccuracyResult)
condition1Result_Accuracy_Modif <- mean(Condition1DF$AccuracyResult_Modif)
condition2Result_Accuracy_Modif <- mean(Condition2DF$AccuracyResult_Modif)
condition3Result_Accuracy_Modif <- mean(Condition3DF$AccuracyResult_Modif)
condition4Result_Accuracy_Modif <- mean(Condition4DF$AccuracyResult_Modif)
condition1Result_EuclError <- mean(Condition1DF$EuclErrorResult)
condition2Result_EuclError <- mean(Condition2DF$EuclErrorResult)
condition3Result_EuclError <- mean(Condition3DF$EuclErrorResult)
condition4Result_EuclError <- mean(Condition4DF$EuclErrorResult)
if(par %% 4 == 1){
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition1Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition2Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition3Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition4Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition1Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition2Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition3Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition4Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition1Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition2Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition3Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition4Result_EuclError))
}else if(par %% 4 == 2){
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition1Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition2Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition3Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition4Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition1Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition2Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition3Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition4Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition1Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition2Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition3Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition4Result_EuclError))
}
else if(par %% 4 == 3){
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition1Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition2Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition3Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition4Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition1Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition2Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition3Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition4Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition1Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition2Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition3Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition4Result_EuclError))
}
else if(par %% 4 == 0){
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition1Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition2Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition3Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy = replace(Accuracy, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition4Result_Accuracy))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition1Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition2Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition3Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(Accuracy_Modif = replace(Accuracy_Modif, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition4Result_Accuracy_Modif))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Irregular", condition1Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Irregular", condition2Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "No Furniture" & Layout == "Regular", condition3Result_EuclError))
AccuracyDF <- AccuracyDF %>%
mutate(EuclideanError = replace(EuclideanError, Participant == par & Furniture == "Has Furniture" & Layout == "Regular", condition4Result_EuclError))
}
}
}
## remove non-participated rows
data.accuracy <- AccuracyDF %>% mutate(Condition = as.factor(Condition),
Furniture = as.factor(Furniture),
Layout = as.factor(Layout))
data.accuracy.female <- filter(data.accuracy, data.accuracy$Participant <= 8)
data.accuracy.male  <- filter(data.accuracy, data.accuracy$Participant > 8)
data.accuracy <- data.accuracy %>% mutate(Participant = as.factor(Participant))
data.accuracy.female <- data.accuracy.female %>% mutate(Participant = as.factor(Participant))
data.accuracy.male <- data.accuracy.male %>% mutate(Participant = as.factor(Participant))
setwd("~/R Projects/ARSpatialMemory-R")
save(data.accuracy, file = "data.accuracy.Rdata")
save(data.accuracy.female, file = "data.accuracy.female.Rdata")
save(data.accuracy.male, file = "data.accuracy.male.Rdata")
library(ggplot2)
library(dplyr)
library(pwr)
library(Rmisc)
library(ARTool)
library(stats)
plotData <- function(m){
d <- Rmisc::summarySE(data.subjective, measurevar = m, groupvars = c("Condition"))
}
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE),
se = sd(x[[col]], na.rm=TRUE)/sqrt(12),
ic = sd(x[[col]], na.rm=TRUE)/sqrt(12) * qt((1-0.05)/2 + .5, 11))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
load("data.accuracy.Rdata")
load("data.accuracy.male.Rdata")
load("data.accuracy.female.Rdata")
shapiro.test(data.accuracy$Accuracy)
shapiro.test(data.accuracy$Accuracy_Modif)
shapiro.test(data.accuracy$EuclideanError)
art.accuracy <- art(Accuracy ~ Furniture * Layout + Error(Participant), data = data.accuracy)
art.accuracy.condition <- art(Accuracy ~ Condition + Error(Participant), data = data.accuracy)
art.accuracy.furniture <- art(Accuracy ~ Furniture + Error(Participant), data = data.accuracy)
art.accuracy.layout <- art(Accuracy ~ Layout + Error(Participant), data = data.accuracy)
View(data.accuracy)
bartlett.test(Accuracy ~ interaction(Furniture, Layout), data = data.accuracy)
View(data.accuracy)
model.accuracy <- anova(art.accuracy)
model.accuracy$part.eta.sq = with(model.accuracy, `Sum Sq`/(`Sum Sq` + `Sum Sq.res`))
model.accuracy
bartlett.test(Accuracy ~ Furniture, data = data.accuracy)
model.accuracy.furniture <- anova(art.accuracy.furniture)
model.accuracy.furniture$part.eta.sq = with(model.accuracy.furniture, `Sum Sq`/(`Sum Sq` + `Sum Sq.res`))
model.accuracy.furniture
d <- Rmisc::summarySE(data.accuracy, measurevar = "Accuracy", groupvars = c("Furniture"))
ggplot(d, aes(x = Furniture, y = Accuracy)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Accuracy-ci, ymax=Accuracy+ci))
model.accuracy.layout<- anova(art.accuracy.layout)
model.accuracy.layout$part.eta.sq = with(model.accuracy.layout, `Sum Sq`/(`Sum Sq` + `Sum Sq.res`))
model.accuracy.layout
d <- Rmisc::summarySE(data.accuracy, measurevar = "Accuracy", groupvars = c("Layout"))
ggplot(d, aes(x = Layout, y = Accuracy)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Accuracy-ci, ymax=Accuracy+ci))
bartlett.test(Accuracy ~ Condition, data = data.accuracy)
model.accuracy.condition <- anova(art.accuracy.condition)
model.accuracy.condition$part.eta.sq = with(model.accuracy.condition, `Sum Sq`/(`Sum Sq` + `Sum Sq.res`))
model.accuracy.condition
marginal = art.con(art.accuracy.condition, "Condition")
marginal
d <- Rmisc::summarySE(data.accuracy, measurevar = "Accuracy", groupvars = c("Condition"))
ggplot(d, aes(x = Condition, y = Accuracy)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Accuracy-ci, ymax=Accuracy+ci))
hist(data.accuracy$Accuracy)
boxplot(data.accuracy$Accuracy)
data.accuracy %>%
identify_outliers(Accuracy)
library(rstatix )
install.packages("rstatix")
library("rstatix")
data.accuracy %>%
identify_outliers(Accuracy)
boxplot(data.accuracy$Accuracy)
data.accuracy %>%
identify_outliers(Accuracy)
install.packages("pwr")
install.packages("pwr")
?pwr.anova.test
View(data.accuracy)
k=4
n=16
f=0.14899
sig.level = 0.05
pwr.anova.test(k, n, f, sig.level)
library(pwr)
library(pwr)
k=4
n=16
f=0.14899
sig.level = 0.05
pwr.anova.test(k, n, f, sig.level)
