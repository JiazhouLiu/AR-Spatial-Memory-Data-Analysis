ggplot(d, aes(x = Furniture, y = Accuracy, fill = Furniture)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Accuracy-ci, ymax=Accuracy+ci))
d <- Rmisc::summarySE(data.accuracy, measurevar = "Accuracy", groupvars = c("Furniture"))
d
ggplot(d, aes(x = Furniture, y = Accuracy, fill = Furniture)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Accuracy-ci, ymax=Accuracy+ci)) + scale_fill_manual(values=c("#ed7d31", "#4472c4"))
d <- Rmisc::summarySE(data.accuracy, measurevar = "Accuracy", groupvars = c("Furniture"))
d
ggplot(d, aes(x = Furniture, y = Accuracy, fill = Furniture)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Accuracy-ci, ymax=Accuracy+ci)) + scale_fill_manual(values=c("#66c2a5", "#fc8d62"))
d <- Rmisc::summarySE(data.accuracy, measurevar = "Accuracy", groupvars = c("Layout"))
d
ggplot(d, aes(x = Layout, y = Accuracy, fill = Layout)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Accuracy-ci, ymax=Accuracy+ci)) + scale_fill_manual(values=c("#8da0cb", "#e78ac3"))
d <- Rmisc::summarySE(data.accuracy, measurevar = "Accuracy", groupvars = c("Condition"))
ggplot(d, aes(x = Condition, y = Accuracy, fill = Condition)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Accuracy-ci, ymax=Accuracy+ci)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#984ea3", "#ff7f00"))
ggplot(d, aes(x = Furniture, y = EuclideanError, fill = Furniture)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=EuclideanError-ci, ymax=EuclideanError+ci)) + scale_fill_manual(values=c("#66c2a5", "#fc8d62"))
d <- Rmisc::summarySE(data.accuracy, measurevar = "EuclideanError", groupvars = c("Furniture"))
d
ggplot(d, aes(x = Furniture, y = EuclideanError, fill = Furniture)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=EuclideanError-ci, ymax=EuclideanError+ci)) + scale_fill_manual(values=c("#66c2a5", "#fc8d62"))
d <- Rmisc::summarySE(data.accuracy, measurevar = "EuclideanError", groupvars = c("Layout"))
d
ggplot(d, aes(x = Layout, y = EuclideanError, fill = Furniture)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=EuclideanError-ci, ymax=EuclideanError+ci)) + scale_fill_manual(values=c("#66c2a5", "#fc8d62"))
d <- Rmisc::summarySE(data.accuracy, measurevar = "EuclideanError", groupvars = c("Layout"))
d
ggplot(d, aes(x = Layout, y = EuclideanError, fill = Furniture)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=EuclideanError-ci, ymax=EuclideanError+ci)) + scale_fill_manual(values=c("#66c2a5", "#fc8d62"))
d <- Rmisc::summarySE(data.accuracy, measurevar = "EuclideanError", groupvars = c("Layout"))
d
ggplot(d, aes(x = Layout, y = EuclideanError, fill = Layout)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=EuclideanError-ci, ymax=EuclideanError+ci)) + scale_fill_manual(values=c("#8da0cb", "#e78ac3"))
d <- Rmisc::summarySE(data.accuracy, measurevar = "EuclideanError", groupvars = c("Condition"))
ggplot(d, aes(x = Condition, y = EuclideanError, fill = Condition)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=EuclideanError-ci, ymax=EuclideanError+ci)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#984ea3", "#ff7f00"))
mean_Chart <- aggregate(cbind(Mental, Physical, Temporal, Performance, Effort, Frustration, Mean)~Furniture , data=data.subjective , mean)
rownames(mean_Chart) <- mean_Chart[,1]
mean_Chart <- as.matrix(mean_Chart[,-1])
lim <- 1.2*max(mean_Chart)
error.bar <- function(x, y, upper, lower=upper, length=0.1,...){
arrows(x,y+upper, x, y-lower, angle=90, code=3, length=length, ...)
}
stdev_Chart <- aggregate(cbind(Mental, Physical, Temporal, Performance, Effort, Frustration, Mean)~Furniture , data=data.subjective , sd)
rownames(stdev_Chart) <- stdev_Chart[,1]
se_Baseline <- as.matrix(stdev_Chart[,-1]) / sqrt(12)
ze_barplot <- barplot(mean_Chart , beside=T , legend.text=T,col=c("#66c2a5", "#fc8d62") , ylim=c(0,lim) , ylab="NASA-TLX Score", args.legend = list(x = "topright", inset = c(0, -0.15)), cex.names=0.8)
error.bar(ze_barplot, mean_Chart, se_Baseline)
d <- Rmisc::summarySE(data.rating, measurevar = "Rating", groupvars = c("Condition"))
ggplot(d, aes(x = Condition, y = Rating, fill = Condition)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Rating-ci, ymax=Rating+ci)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#984ea3", "#ff7f00"))
load("data.locomotion.furniture.Rdata")
str(data.locomotion.furniture)
summary(data.locomotion.furniture)
load("data.locomotion.furniture.Rdata")
str(data.locomotion.furniture)
summary(data.locomotion.furniture)
load("data.locomotion.furniture.Rdata")
summary(data.locomotion.furniture)
load("data.locomotion.layout.Rdata")
summary(data.locomotion.layout)
load("data.locomotion.condition.Rdata")
summary(data.locomotion.condition)
boxplot(data.locomotion.furniture$Rotation)
boxplot(data.locomotion.furniture$Distance)
boxplot(data.locomotion.furniture$Rotation)
boxplot(data.locomotion.furniture$Distance)
boxplot(data.locomotion.furniture$Rotation)
boxplot(data.locomotion.furniture$Distance)
Q <- quantile(data.locomotion.furniture$Distance, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(data.locomotion.furniture$Distance)
up <-  Q[2]+1.5*iqr # Upper Range
data.locomotion.furniture.eliminated <- subset(data.locomotion.furniture, data.locomotion.furniture$Distance < up)
summary(data.locomotion.furniture.eliminated)
shapiro.test(data.locomotion.furniture.eliminated$Rotation)
shapiro.test(data.locomotion.furniture.eliminated$Distance)
shapiro.test(data.locomotion.furniture$Rotation)
t.test(data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated["Furniture"]=="Furniture",2], data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated['Furniture']=="NoFurniture",2], paired=T)
t.test(data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated["Furniture"]=="Furniture",2], data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated['Furniture']=="NoFurniture",2])
t.test(data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated["Furniture"]=="Furniture",3], data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated['Furniture']=="NoFurniture",3])
t.test(data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated["Furniture"]=="Furniture",3], data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated['Furniture']=="NoFurniture",3], paired = TRUE)
t.test(data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated["Furniture"]=="Furniture",3], data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated['Furniture']=="NoFurniture",3])
t.test(data.locomotion.furniture[data.locomotion.furniture["Furniture"]=="Furniture",3], data.locomotion.furniture[data.locomotion.furniture['Furniture']=="NoFurniture",3], paired = TRUE)
t.test(data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated["Furniture"]=="Furniture",3], data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated['Furniture']=="NoFurniture",3])
t.Furniture.Rotation <- t.test(data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated["Furniture"]=="Furniture",3], data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated['Furniture']=="NoFurniture",3])
t.Furniture.Distance <- t.test(data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated["Furniture"]=="Furniture",4], data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated['Furniture']=="NoFurniture",4])
t.Furniture.Rotation <- t.test(data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated["Furniture"]=="Furniture",3], data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated['Furniture']=="NoFurniture",3])
t.Furniture.Rotation
t.Furniture.Distance <- t.test(data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated["Furniture"]=="Furniture",4], data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated['Furniture']=="NoFurniture",4])
t.Furniture.Distance
d <- Rmisc::summarySE(data.locomotion.furniture.eliminated, measurevar = "Rotation", groupvars = c("Furniture"))
d
ggplot(d, aes(x = Rotation, y = EuclideanError, fill = Rotation)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Rotation-ci, ymax=Rotation+ci)) + scale_fill_manual(values=c("#66c2a5", "#fc8d62"))
d <- Rmisc::summarySE(data.locomotion.furniture.eliminated, measurevar = "Rotation", groupvars = c("Furniture"))
d
ggplot(d, aes(x = Rotation, y = EuclideanError, fill = Rotation)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Rotation-ci, ymax=Rotation+ci)) + scale_fill_manual(values=c("#66c2a5", "#fc8d62"))
d <- Rmisc::summarySE(data.locomotion.furniture.eliminated, measurevar = "Rotation", groupvars = c("Furniture"))
d
ggplot(d, aes(x = Furniture, y = Rotation, fill = Furniture)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Rotation-ci, ymax=Rotation+ci)) + scale_fill_manual(values=c("#66c2a5", "#fc8d62"))
library(dplyr)
library(ggpubr)
library(rstatix)
library(dplyr)
library(ggpubr)
library(rstatix)
load("data.locomotion.furniture.Rdata")
summary(data.locomotion.furniture)
load("data.locomotion.layout.Rdata")
summary(data.locomotion.layout)
load("data.locomotion.condition.Rdata")
summary(data.locomotion.condition)
boxplot(data.locomotion.furniture$Rotation)
boxplot(data.locomotion.furniture$Distance)
Q <- quantile(data.locomotion.furniture$Distance, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(data.locomotion.furniture$Distance)
up <-  Q[2]+1.5*iqr # Upper Range
data.locomotion.furniture.eliminated <- subset(data.locomotion.furniture, data.locomotion.furniture$Distance < up)
summary(data.locomotion.furniture.eliminated)
shapiro.test(data.locomotion.furniture.eliminated$Rotation)
shapiro.test(data.locomotion.furniture.eliminated$Distance)
t.Furniture.Rotation <- t.test(data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated["Furniture"]=="Furniture",3], data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated['Furniture']=="NoFurniture",3])
t.Furniture.Rotation
t.Furniture.Distance <- t.test(data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated["Furniture"]=="Furniture",4], data.locomotion.furniture.eliminated[data.locomotion.furniture.eliminated['Furniture']=="NoFurniture",4])
t.Furniture.Distance
d <- Rmisc::summarySE(data.locomotion.furniture.eliminated, measurevar = "Rotation", groupvars = c("Furniture"))
d
ggplot(d, aes(x = Furniture, y = Rotation, fill = Furniture)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Rotation-ci, ymax=Rotation+ci)) + scale_fill_manual(values=c("#66c2a5", "#fc8d62"))
d <- Rmisc::summarySE(data.locomotion.furniture.eliminated, measurevar = "Rotation", groupvars = c("Furniture"))
d
ggplot(d, aes(x = Furniture, y = Rotation, fill = Furniture)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Rotation-ci, ymax=Rotation+ci)) + scale_fill_manual(values=c("#66c2a5", "#fc8d62"))
d2 <- Rmisc::summarySE(data.locomotion.furniture.eliminated, measurevar = "Distance", groupvars = c("Furniture"))
d2
ggplot(d2, aes(x = Furniture, y = Distance, fill = Furniture)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Distance-ci, ymax=Distance+ci)) + scale_fill_manual(values=c("#66c2a5", "#fc8d62"))
d <- Rmisc::summarySE(data.locomotion.furniture.eliminated, measurevar = "Rotation", groupvars = c("Furniture"))
ggplot(d, aes(x = Furniture, y = Rotation, fill = Furniture)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Rotation-ci, ymax=Rotation+ci)) + scale_fill_manual(values=c("#66c2a5", "#fc8d62"))
d2 <- Rmisc::summarySE(data.locomotion.furniture.eliminated, measurevar = "Distance", groupvars = c("Furniture"))
ggplot(d2, aes(x = Furniture, y = Distance, fill = Furniture)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Distance-ci, ymax=Distance+ci)) + scale_fill_manual(values=c("#66c2a5", "#fc8d62"))
boxplot(data.locomotion.layout$Rotation)
boxplot(data.locomotion.layout$Distance)
boxplot(data.locomotion.layout$Rotation)
boxplot(data.locomotion.layout$Distance)
Q <- quantile(data.locomotion.furniture$Distance, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(data.locomotion.furniture$Distance)
up <-  Q[2]+1.5*iqr # Upper Range
data.locomotion.furniture.eliminated <- subset(data.locomotion.furniture, data.locomotion.furniture$Distance < up)
summary(data.locomotion.furniture.eliminated)
boxplot(data.locomotion.layout$Rotation)
boxplot(data.locomotion.layout$Distance)
shapiro.test(data.locomotion.layout$Rotation)
shapiro.test(data.locomotion.layout$Distance)
t.Layout.Rotation <- t.test(data.locomotion.layout[data.locomotion.layout["Layout"]=="Regular",3], data.locomotion.layout[data.locomotion.layout['Layout']=="Irregular",3], paired = T)
t.Layout.Rotation
W.Layout.Distance <- wilcox.test(data.locomotion.layout[data.locomotion.layout["Layout"]=="Regular",4], data.locomotion.layout[data.locomotion.layout['Layout']=="Irregular",4])
W.Layout.Distance
d <- Rmisc::summarySE(data.locomotion.layout, measurevar = "Rotation", groupvars = c("Layout"))
ggplot(d, aes(x = Layout, y = Rotation, fill = Layout)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Rotation-ci, ymax=Rotation+ci)) + scale_fill_manual(values=c("#8da0cb", "#e78ac3"))
d2 <- Rmisc::summarySE(data.locomotion.layout, measurevar = "Distance", groupvars = c("Layout"))
ggplot(d2, aes(x = Layout, y = Distance, fill = Layout)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Distance-ci, ymax=Distance+ci)) + scale_fill_manual(values=c("#8da0cb", "#e78ac3"))
boxplot(data.locomotion.condition$Rotation)
boxplot(data.locomotion.condition$Distance)
boxplot(data.locomotion.condition$Rotation)
boxplot(data.locomotion.condition$Distance)
Q <- quantile(data.locomotion.condition$Rotation, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(data.locomotion.condition$Rotation)
up <-  Q[2]+1.5*iqr # Upper Range
data.locomotion.furniture.eliminated <- subset(data.locomotion.furniture, data.locomotion.condition$Rotation < up)
boxplot(data.locomotion.furniture.eliminated$Rotation)
boxplot(data.locomotion.furniture.eliminated$Distance)
Q2 <- quantile(data.locomotion.condition$Distance, probs=c(.25, .75), na.rm = FALSE)
iqr2 <- IQR(data.locomotion.condition$Distance)
up2 <-  Q2[2]+1.5*iqr2 # Upper Range
boxplot(data.locomotion.condition$Rotation)
boxplot(data.locomotion.condition$Distance)
Q <- quantile(data.locomotion.condition$Rotation, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(data.locomotion.condition$Rotation)
up <-  Q[2]+1.5*iqr # Upper Range
Q2 <- quantile(data.locomotion.condition$Distance, probs=c(.25, .75), na.rm = FALSE)
iqr2 <- IQR(data.locomotion.condition$Distance)
up2 <-  Q2[2]+1.5*iqr2 # Upper Range
data.locomotion.furniture.eliminated <- subset(data.locomotion.furniture, data.locomotion.condition$Rotation < up)
data.locomotion.furniture.eliminated <- subset(data.locomotion.furniture, data.locomotion.condition$Distance < up2)
boxplot(data.locomotion.condition$Rotation)
boxplot(data.locomotion.condition$Distance)
Q <- quantile(data.locomotion.condition$Rotation, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(data.locomotion.condition$Rotation)
up <-  Q[2]+1.5*iqr # Upper Range
Q2 <- quantile(data.locomotion.condition$Distance, probs=c(.25, .75), na.rm = FALSE)
iqr2 <- IQR(data.locomotion.condition$Distance)
up2 <-  Q2[2]+1.5*iqr2 # Upper Range
data.locomotion.furniture.eliminated <- subset(data.locomotion.furniture, data.locomotion.condition$Rotation < up)
data.locomotion.furniture.eliminated <- subset(data.locomotion.furniture.eliminated, data.locomotion.condition$Distance < up2)
boxplot(data.locomotion.condition$Rotation)
boxplot(data.locomotion.condition$Distance)
Q <- quantile(data.locomotion.condition$Rotation, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(data.locomotion.condition$Rotation)
up <-  Q[2]+1.5*iqr # Upper Range
Q2 <- quantile(data.locomotion.condition$Distance, probs=c(.25, .75), na.rm = FALSE)
iqr2 <- IQR(data.locomotion.condition$Distance)
up2 <-  Q2[2]+1.5*iqr2 # Upper Range
data.locomotion.furniture.eliminated <- subset(data.locomotion.furniture, data.locomotion.condition$Rotation < up)
data.locomotion.furniture.eliminated <- subset(data.locomotion.furniture.eliminated, data.locomotion.condition$Distance < up2)
boxplot(data.locomotion.furniture.eliminated$Rotation)
boxplot(data.locomotion.furniture.eliminated$Distance)
boxplot(data.locomotion.condition$Rotation)
boxplot(data.locomotion.condition$Distance)
Q <- quantile(data.locomotion.condition$Rotation, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(data.locomotion.condition$Rotation)
up <-  Q[2]+1.5*iqr # Upper Range
Q2 <- quantile(data.locomotion.condition$Distance, probs=c(.25, .75), na.rm = FALSE)
iqr2 <- IQR(data.locomotion.condition$Distance)
up2 <-  Q2[2]+1.5*iqr2 # Upper Range
data.locomotion.condition.eliminated <- subset(data.locomotion.condition, data.locomotion.condition$Rotation < up)
data.locomotion.condition.eliminated <- subset(data.locomotion.condition.eliminated, data.locomotion.condition$Distance < up2)
boxplot(data.locomotion.condition.eliminated$Rotation)
boxplot(data.locomotion.condition.eliminated$Distance)
boxplot(data.locomotion.condition$Rotation)
boxplot(data.locomotion.condition$Distance)
Q <- quantile(data.locomotion.condition$Rotation, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(data.locomotion.condition$Rotation)
up <-  Q[2]+1.5*iqr # Upper Range
Q2 <- quantile(data.locomotion.condition$Distance, probs=c(.25, .75), na.rm = FALSE)
iqr2 <- IQR(data.locomotion.condition$Distance)
up2 <-  Q2[2]+1.5*iqr2 # Upper Range
data.locomotion.condition.eliminated <- subset(data.locomotion.condition, data.locomotion.condition$Rotation < up)
data.locomotion.condition.eliminated <- subset(data.locomotion.condition.eliminated, data.locomotion.condition.eliminated$Distance < up2)
boxplot(data.locomotion.condition.eliminated$Rotation)
boxplot(data.locomotion.condition.eliminated$Distance)
boxplot(data.locomotion.condition$Rotation)
boxplot(data.locomotion.condition$Distance)
Q <- quantile(data.locomotion.condition$Rotation, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(data.locomotion.condition$Rotation)
up <-  Q[2]+1.5*iqr # Upper Range
data.locomotion.condition.eliminated <- subset(data.locomotion.condition, data.locomotion.condition$Rotation < up)
Q2 <- quantile(data.locomotion.condition.eliminated$Distance, probs=c(.25, .75), na.rm = FALSE)
iqr2 <- IQR(data.locomotion.condition.eliminated$Distance)
up2 <-  Q2[2]+1.5*iqr2 # Upper Range
data.locomotion.condition.eliminated <- subset(data.locomotion.condition.eliminated, data.locomotion.condition.eliminated$Distance < up2)
boxplot(data.locomotion.condition.eliminated$Rotation)
boxplot(data.locomotion.condition.eliminated$Distance)
shapiro.test(data.locomotion.condition.eliminated$Rotation)
shapiro.test(data.locomotion.condition.eliminated$Distance)
art.locomotion.Rotation <- art(Rotation ~ Condition + Error(PID), data = data.locomotion.condition.eliminated)
art.locomotion.Distance <- art(Distance ~ Condition + Error(PID), data = data.locomotion.condition.eliminated)
model.locomotion.Rotation <- anova(art.locomotion.Rotation)
model.locomotion.Rotation$part.eta.sq = with(model.locomotion.Rotation, `Sum Sq`/(`Sum Sq` + `Sum Sq.res`))
model.locomotion.Rotation
model.locomotion.Distance <- anova(art.locomotion.Distance)
model.locomotion.Distance$part.eta.sq = with(model.locomotion.Distance, `Sum Sq`/(`Sum Sq` + `Sum Sq.res`))
model.locomotion.Distance
d <- Rmisc::summarySE(data.locomotion.layout, measurevar = "Rotation", groupvars = c("Condition"))
d <- Rmisc::summarySE(data.locomotion.condition.eliminated, measurevar = "Rotation", groupvars = c("Condition"))
ggplot(d, aes(x = Condition, y = Rotation, fill = Condition)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Rotation-ci, ymax=Rotation+ci)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#984ea3", "#ff7f00"))
d2 <- Rmisc::summarySE(data.locomotion.condition.eliminated, measurevar = "Distance", groupvars = c("Condition"))
ggplot(d2, aes(x = Condition, y = Distance, fill = Condition)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Distance-ci, ymax=Distance+ci)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#984ea3", "#ff7f00"))
marginal = art.con(art.locomotion.Rotation, "Condition")
marginal
d <- Rmisc::summarySE(data.locomotion.condition.eliminated, measurevar = "Rotation", groupvars = c("Condition"))
ggplot(d, aes(x = Condition, y = Rotation, fill = Condition)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Rotation-ci, ymax=Rotation+ci)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#984ea3", "#ff7f00"))
d2 <- Rmisc::summarySE(data.locomotion.condition.eliminated, measurevar = "Distance", groupvars = c("Condition"))
ggplot(d2, aes(x = Condition, y = Distance, fill = Condition)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Distance-ci, ymax=Distance+ci)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#984ea3", "#ff7f00"))
load("data.recallTime.raw.Rdata")
summary(data.recallTime.raw)
boxplot(data.recallTime.raw$AnswerTime)
load("data.recallTime.raw.Rdata")
summary(data.recallTime.raw)
boxplot(data.recallTime.raw$AnswerTime)
library(dplyr)
library(ggpubr)
library(rstatix)
library(dplyr)
library(ggpubr)
library(rstatix)
load("data.recallTime.raw.Rdata")
summary(data.recallTime.raw)
boxplot(data.recallTime.raw$AnswerTime)
library("dplyr")
setwd("~/R Projects/ARSpatialMemory-R/Data/interactionData")
WDFiles = list.files(pattern="*Interaction.csv")
data.recallTime.raw <- data.frame()
for (i in 1:length(WDFiles)){
mydata <- read.csv(WDFiles[i])
mydata <- select(mydata, TimeSinceStart, TrialID, FurnitureCondition, AlignmentCondition, Info)
mydata <- subset(mydata, TrialID!="Training")
mydata <- subset(mydata, Info=="Recall Phase" | Info=="Result")
differenceDF <- data.frame(matrix(ncol = 3, nrow = 0))
for(j in seq(1, 40, 2)){
difference <- mydata[j+1,"TimeSinceStart"] - mydata[j,"TimeSinceStart"]
differenceDF <- rbind(differenceDF, c(mydata[j, "TrialID"], mydata[j, "FurnitureCondition"], mydata[j, "AlignmentCondition"], difference))
}
colnames(differenceDF) <- c("TrialID", "Furniture", "Layout", "AnswerTime")
differenceDF$PID <- i
differenceDF$Condition <- paste(differenceDF$Furniture, differenceDF$Layout, sep="-")
differenceDF <- differenceDF %>%
select(PID, TrialID, Furniture, Layout, Condition, AnswerTime) %>%
mutate(PID= as.factor(PID),
TrialID = as.factor(TrialID),
Condition = as.factor(Condition),
Furniture = as.factor(Furniture),
Layout = as.factor(Layout),
AnswerTime = as.numeric(Layout))
data.recallTime.raw <- rbind(data.recallTime.raw, differenceDF)
}
setwd("~/R Projects/ARSpatialMemory-R")
save(data.recallTime.raw, file = "data.recallTime.raw.Rdata")
load("data.recallTime.raw.Rdata")
summary(data.recallTime.raw)
library("dplyr")
setwd("~/R Projects/ARSpatialMemory-R/Data/interactionData")
WDFiles = list.files(pattern="*Interaction.csv")
data.recallTime.raw <- data.frame()
for (i in 1:length(WDFiles)){
mydata <- read.csv(WDFiles[i])
mydata <- select(mydata, TimeSinceStart, TrialID, FurnitureCondition, AlignmentCondition, Info)
mydata <- subset(mydata, TrialID!="Training")
mydata <- subset(mydata, Info=="Recall Phase" | Info=="Result")
differenceDF <- data.frame(matrix(ncol = 3, nrow = 0))
for(j in seq(1, 40, 2)){
difference <- mydata[j+1,"TimeSinceStart"] - mydata[j,"TimeSinceStart"]
differenceDF <- rbind(differenceDF, c(mydata[j, "TrialID"], mydata[j, "FurnitureCondition"], mydata[j, "AlignmentCondition"], difference))
}
colnames(differenceDF) <- c("TrialID", "Furniture", "Layout", "AnswerTime")
differenceDF$PID <- i
differenceDF$Condition <- paste(differenceDF$Furniture, differenceDF$Layout, sep="-")
differenceDF <- differenceDF %>%
select(PID, TrialID, Furniture, Layout, Condition, AnswerTime) %>%
mutate(PID= as.factor(PID),
TrialID = as.factor(TrialID),
Condition = as.factor(Condition),
Furniture = as.factor(Furniture),
Layout = as.factor(Layout),
AnswerTime = as.double(Layout))
data.recallTime.raw <- rbind(data.recallTime.raw, differenceDF)
}
setwd("~/R Projects/ARSpatialMemory-R")
save(data.recallTime.raw, file = "data.recallTime.raw.Rdata")
load("data.recallTime.raw.Rdata")
summary(data.recallTime.raw)
library("dplyr")
setwd("~/R Projects/ARSpatialMemory-R/Data/interactionData")
WDFiles = list.files(pattern="*Interaction.csv")
data.recallTime.raw <- data.frame()
for (i in 1:length(WDFiles)){
mydata <- read.csv(WDFiles[i])
mydata <- select(mydata, TimeSinceStart, TrialID, FurnitureCondition, AlignmentCondition, Info)
mydata <- subset(mydata, TrialID!="Training")
mydata <- subset(mydata, Info=="Recall Phase" | Info=="Result")
differenceDF <- data.frame(matrix(ncol = 3, nrow = 0))
for(j in seq(1, 40, 2)){
difference <- mydata[j+1,"TimeSinceStart"] - mydata[j,"TimeSinceStart"]
differenceDF <- rbind(differenceDF, c(mydata[j, "TrialID"], mydata[j, "FurnitureCondition"], mydata[j, "AlignmentCondition"], difference))
}
colnames(differenceDF) <- c("TrialID", "Furniture", "Layout", "AnswerTime")
differenceDF$PID <- i
differenceDF$Condition <- paste(differenceDF$Furniture, differenceDF$Layout, sep="-")
differenceDF <- differenceDF %>%
select(PID, TrialID, Furniture, Layout, Condition, AnswerTime) %>%
mutate(PID= as.factor(PID),
TrialID = as.factor(TrialID),
Condition = as.factor(Condition),
Furniture = as.factor(Furniture),
Layout = as.factor(Layout))
data.recallTime.raw <- rbind(data.recallTime.raw, differenceDF)
}
setwd("~/R Projects/ARSpatialMemory-R")
save(data.recallTime.raw, file = "data.recallTime.raw.Rdata")
View(data.recallTime.raw)
library("dplyr")
setwd("~/R Projects/ARSpatialMemory-R/Data/interactionData")
WDFiles = list.files(pattern="*Interaction.csv")
data.recallTime.raw <- data.frame()
for (i in 1:length(WDFiles)){
mydata <- read.csv(WDFiles[i])
mydata <- select(mydata, TimeSinceStart, TrialID, FurnitureCondition, AlignmentCondition, Info)
mydata <- subset(mydata, TrialID!="Training")
mydata <- subset(mydata, Info=="Recall Phase" | Info=="Result")
differenceDF <- data.frame(matrix(ncol = 3, nrow = 0))
for(j in seq(1, 40, 2)){
difference <- mydata[j+1,"TimeSinceStart"] - mydata[j,"TimeSinceStart"]
differenceDF <- rbind(differenceDF, c(mydata[j, "TrialID"], mydata[j, "FurnitureCondition"], mydata[j, "AlignmentCondition"], difference))
}
colnames(differenceDF) <- c("TrialID", "Furniture", "Layout", "AnswerTime")
differenceDF$PID <- i
differenceDF$Condition <- paste(differenceDF$Furniture, differenceDF$Layout, sep="-")
differenceDF <- differenceDF %>%
select(PID, TrialID, Furniture, Layout, Condition, AnswerTime) %>%
mutate(PID= as.factor(PID),
TrialID = as.factor(TrialID),
Condition = as.factor(Condition),
Furniture = as.factor(Furniture),
Layout = as.factor(Layout),
AnswerTime = as.numeric(Layout))
data.recallTime.raw <- rbind(data.recallTime.raw, differenceDF)
}
setwd("~/R Projects/ARSpatialMemory-R")
save(data.recallTime.raw, file = "data.recallTime.raw.Rdata")
library("dplyr")
setwd("~/R Projects/ARSpatialMemory-R/Data/interactionData")
WDFiles = list.files(pattern="*Interaction.csv")
data.recallTime.raw <- data.frame()
for (i in 1:length(WDFiles)){
mydata <- read.csv(WDFiles[i])
mydata <- select(mydata, TimeSinceStart, TrialID, FurnitureCondition, AlignmentCondition, Info)
mydata <- subset(mydata, TrialID!="Training")
mydata <- subset(mydata, Info=="Recall Phase" | Info=="Result")
differenceDF <- data.frame(matrix(ncol = 3, nrow = 0))
for(j in seq(1, 40, 2)){
difference <- mydata[j+1,"TimeSinceStart"] - mydata[j,"TimeSinceStart"]
differenceDF <- rbind(differenceDF, c(mydata[j, "TrialID"], mydata[j, "FurnitureCondition"], mydata[j, "AlignmentCondition"], difference))
}
colnames(differenceDF) <- c("TrialID", "Furniture", "Layout", "AnswerTime")
differenceDF$PID <- i
differenceDF$Condition <- paste(differenceDF$Furniture, differenceDF$Layout, sep="-")
differenceDF <- differenceDF %>%
select(PID, TrialID, Furniture, Layout, Condition, AnswerTime) %>%
mutate(PID= as.factor(PID),
TrialID = as.factor(TrialID),
Condition = as.factor(Condition),
Furniture = as.factor(Furniture),
Layout = as.factor(Layout),
AnswerTime = as.numeric(AnswerTime))
data.recallTime.raw <- rbind(data.recallTime.raw, differenceDF)
}
setwd("~/R Projects/ARSpatialMemory-R")
save(data.recallTime.raw, file = "data.recallTime.raw.Rdata")
load("data.recallTime.raw.Rdata")
summary(data.recallTime.raw)
boxplot(data.recallTime.raw$AnswerTime)
Q <- quantile(data.recallTime.raw$AnswerTime, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(data.recallTime.raw$AnswerTime)
up <-  Q[2]+1.5*iqr # Upper Range
outliers <- subset(data.recallTime.raw, data.recallTime.raw$AnswerTime >= up)
outliers
data.recallTime.eliminated <- subset(data.recallTime.raw, data.accuracy.raw$LearningTime < up)
data.recallTime.eliminated <- subset(data.recallTime.raw, data.recallTime.raw$AnswerTime < up)
str(data.recallTime.eliminated)
summary(data.recallTime.eliminated)
data.recallTime <- data.recallTime.eliminated %>% group_by(PID, Condition) %>% mutate(AnswerTime = mean(AnswerTime)) %>% ungroup()
data.recallTime <- distinct(data.recallTime)
data.recallTime.female <- filter(data.recallTime, as.integer(data.recallTime$PID) <= 8)
data.recallTime.male  <- filter(data.recallTime, as.integer(data.recallTime$PID) > 8)
summary(data.accuracy)
data.recallTime <- data.recallTime.eliminated %>% group_by(PID, Condition) %>% mutate(AnswerTime = mean(AnswerTime)) %>% ungroup()
data.recallTime <- distinct(data.recallTime)
data.recallTime.female <- filter(data.recallTime, as.integer(data.recallTime$PID) <= 8)
data.recallTime.male  <- filter(data.recallTime, as.integer(data.recallTime$PID) > 8)
summary(data.recallTime)
View(data.recallTime)
data.recallTime.eliminated = subset(data.recallTime.eliminated, select = -TrialID)
data.recallTime <- data.recallTime.eliminated %>% group_by(PID, Condition) %>% mutate(AnswerTime = mean(AnswerTime)) %>% ungroup()
data.recallTime <- distinct(data.recallTime)
data.recallTime.female <- filter(data.recallTime, as.integer(data.recallTime$PID) <= 8)
data.recallTime.male  <- filter(data.recallTime, as.integer(data.recallTime$PID) > 8)
summary(data.recallTime)
View(data.recallTime)
shapiro.test(data.recallTime$AnswerTime)
bartlett.test(AnswerTime ~ interaction(Furniture, Layout), data = data.recallTime)
model.recallTime<- anova(AnswerTime ~ Furniture * Layout + Error(PID), data = data.recallTime)
model.recallTime<- aov(AnswerTime ~ Furniture * Layout + Error(PID), data = data.recallTime)
model.recallTime <- aov(AnswerTime ~ Furniture * Layout + Error(PID), data = data.recallTime)
model.recallTime$part.eta.sq = with(model.recallTime, `Sum Sq`/(`Sum Sq` + `Sum Sq.res`))
model.recallTime <- aov(AnswerTime ~ Furniture * Layout + Error(PID), data = data.recallTime)
model.recallTime
model.recallTime <- aov(AnswerTime ~ Furniture * Layout + Error(PID), data = data.recallTime)
summary(model.recallTime)
model.recallTime.furniture <- aov(AnswerTime ~ Furniture + Error(PID), data = data.recallTime)
summary(model.recallTime.furniture)
model.recallTime.furniture$part.eta.sq = with(model.recallTime.furniture, `Sum Sq`/(`Sum Sq` + `Sum Sq.res`))
eta_squared(model.recallTime.furniture, partial = FALSE)
eta_squared(model.recallTime.furniture, partial = T)
model.recallTime.furniture <- aov(AnswerTime ~ Furniture + Error(PID), data = data.recallTime)
summary(model.recallTime.furniture)
eta_squared(model.recallTime.furniture, partial = T)
model.recallTime.furniture <- aov(AnswerTime ~ Furniture + Error(PID), data = data.recallTime)
summary(model.recallTime.furniture)
library(effectsize)
eta_squared(model.recallTime.furniture, partial = T)
model.recallTime.furniture <- aov(AnswerTime ~ Furniture + Error(PID), data = data.recallTime)
summary(model.recallTime.furniture)
eta_squared(model.recallTime.furniture, partial = T)
model.recallTime.furniture <- aov(AnswerTime ~ Furniture + Error(PID), data = data.recallTime)
summary(model.recallTime.furniture)
eta_squared(model.recallTime.furniture)
k=2
n=32
f=eta2_to_f(0.34)
sig.level = 0.05
pwr.anova.test(k, n, f, sig.level)
library(pwr)
k=2
n=32
f=eta2_to_f(0.34)
sig.level = 0.05
pwr.anova.test(k, n, f, sig.level)
d <- Rmisc::summarySE(data.recallTime, measurevar = "AnswerTime", groupvars = c("Furniture"))
d
ggplot(d, aes(x = Furniture, y = AnswerTime, fill = Furniture)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=AnswerTime-ci, ymax=AnswerTime+ci)) + scale_fill_manual(values=c("#66c2a5", "#fc8d62"))
model.recallTime.furniture <- aov(AnswerTime ~ Furniture + Error(PID), data = data.recallTime)
summary(model.recallTime.furniture)
eta_squared(model.recallTime.furniture)
t.Furniture.RecallTime <- t.test(data.recallTime[data.recallTime["Furniture"]=="Furniture",5], data.recallTime[data.recallTime['Furniture']=="NoFurniture",5])
t.Furniture.RecallTime <- t.test(data.recallTime[data.recallTime["Furniture"]=="HasFurniture",5], data.recallTime[data.recallTime['Furniture']=="NoFurniture",5])
t.Furniture.RecallTime
d <- Rmisc::summarySE(data.recallTime, measurevar = "AnswerTime", groupvars = c("Furniture"))
d
ggplot(d, aes(x = Furniture, y = AnswerTime, fill = Furniture)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=AnswerTime-ci, ymax=AnswerTime+ci)) + scale_fill_manual(values=c("#66c2a5", "#fc8d62"))
bartlett.test(AnswerTime ~ Layout, data = data.accuracy)
bartlett.test(AnswerTime ~ Layout, data = data.recallTime)
t.Layout.RecallTime <- t.test(data.recallTime[data.recallTime["Layout"]=="Regular",5], data.recallTime[data.recallTime['Layout']=="Irregular",5])
t.Layout.RecallTime
d <- Rmisc::summarySE(data.recallTime, measurevar = "AnswerTime", groupvars = c("Layout"))
d
ggplot(d, aes(x = Layout, y = AnswerTime, fill = Layout)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=AnswerTime-ci, ymax=AnswerTime+ci)) + scale_fill_manual(values=c("#8da0cb", "#e78ac3"))
bartlett.test(AnswerTime ~ Condition, data = data.recallTime)
aov <- aov(AnswerTime ~ Condition, data.recallTime)
summary(aov)
d <- Rmisc::summarySE(data.accuracy, measurevar = "AnswerTime", groupvars = c("Condition"))
d <- Rmisc::summarySE(data.recallTime, measurevar = "AnswerTime", groupvars = c("Condition"))
ggplot(d, aes(x = Condition, y = AnswerTime, fill = Condition)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=Accuracy-ci, ymax=Accuracy+ci)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#984ea3", "#ff7f00"))
d <- Rmisc::summarySE(data.recallTime, measurevar = "AnswerTime", groupvars = c("Condition"))
ggplot(d, aes(x = Condition, y = AnswerTime, fill = Condition)) + geom_bar(stat = "identity") + geom_errorbar(aes(ymin=AnswerTime-ci, ymax=AnswerTime+ci)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#984ea3", "#ff7f00"))
model.recallTime <- aov(AnswerTime ~ Furniture * Layout + Error(PID), data = data.recallTime)
summary(model.recallTime)
